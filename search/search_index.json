{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the Nextcloud News APP documentation, it contains information for users, administrators and developers. News is an APP for Nextcloud that can be installed from the official APP Store.</p> <p>News offers the user an RSS/Atom feed reader and can be used to subscribe to multiple feeds, which get automatically updated in the background. Additionally, news offers a REST-API that allows clients to synchronize with News.</p>"},{"location":"admin/","title":"Admin","text":"<p>Welcome to the Admin documentation.</p>"},{"location":"admin/#administration-via-occ","title":"Administration via OCC","text":"<p>News integrates with Nextclouds command line tool occ.</p> <p>To get an overview over the available commands simply execute <code>./occ list news</code></p> <p>In most environments you will have to call occ like this:</p> <pre><code>sudo -u www-data php ./occ list news\n</code></pre> <p>More information about occ here: Nextcloud Admin Manual</p>"},{"location":"admin/#settings","title":"Settings","text":"<p>The following sections explain some of the more complicated settings on the admin page.</p>"},{"location":"admin/#system-cron","title":"System Cron","text":"<p>Nextcloud uses cron to run regular jobs, News relies on the Job system to execute the feed updates. Alternatively you may use an external updater, in this case you need to disable the system cron in the settings.</p>"},{"location":"admin/#auto-purge-count","title":"Auto purge count","text":"<ul> <li>The default value is 200.</li> <li>To disable this feature, use -1.</li> <li>Unread and starred items are not deleted.</li> </ul> <p>Auto purging automatically removes the oldest read items of every feed after every update. The value you enter here is used as the limit of read items per feed, unless the feed comes with more items in it's feed. The individual limit per feed is only adjusted when it's bigger. Let's say last feed update came with 210 items, then that will be the limit for that feed as long as no bigger update with more items is fetched. In this case the limit will be 210 instead of 200, for that feed.</p> <p>This is needed to prevent items from reappearing in the feed.</p>"},{"location":"admin/#purge-unread-items","title":"Purge unread items","text":"<p>This changes the behavior of the auto purging to also purge unread items. This is useful if you have users with a lot of unread items.</p> <p>Starred items are always kept.</p>"},{"location":"admin/#explore-service","title":"Explore Service","text":"<p>If you are using the News app in your company/community, it might be interesting to offer your users a bunch of easily to discover default feeds. You could also create a website where people can add and up-vote news feeds like bigger cloud feed readers like Feedly do it or even convert their APIs into a service for the News app (if someone wants to provide one for the News app, feel free to contact us by creating an issue in the bug tracker).</p> <p>The URL should be a path to a directory which contains a JSON file in the format of feeds.LANG_CODE.json where LANG_CODE is a two character language code (e.g. en or de).</p> <p>For example, entering the URL https://domain.com/directory as explore URL will produce the following request for German users:</p> <pre><code>GET https://domain.com/directory/feeds.de.json\n</code></pre> <p>Do not forget to implement CORS in your API, otherwise the request will fail!</p>"},{"location":"admin/#update-interval","title":"Update Interval","text":"<p>The update interval is used to determine when the next update of all feeds should be done. By default, the value is set to 3600 seconds (1 hour) You can configure this interval as an administrator. The new value is only applied after the next run of the updater.</p> <p>Starting with News 25.2.0, the app can dynamically adjust update schedules based on feed activity. This feature, disabled by default, can be enabled by the Nextcloud administrator.</p> <p>By analyzing feed data, the app can optimize update frequencies, potentially reducing server load and network traffic. The time until the next calculated update point is limited to a maximum of 24 hours. However, this feature may not work correctly with all feeds.</p> <p>Users can check the calculated next update time in the app's settings. This information will only be displayed when the dynamic update scheduling feature is enabled.</p>"},{"location":"clients/","title":"Clients","text":"<p>Clients are applications that use the REST API of News. They are not maintained by the News team. If you are the developer of an app, feel free to create a PR to add your app to this list.</p>"},{"location":"clients/#sync-clients","title":"Sync Clients","text":"<p>A sync client can be used to read news and synchronize via the API.</p> Name OS/Platform License Source RSS Guard Windows, Linux, OS/2, macOS GPL-3.0 License GitHub Fluent Reader Windows, Linux, macOS BSD-3-Clause License GitHub Communique Linux LGPL-2.1 License GitHub NewsFlash Linux GPL-3.0 License GitLab Nextcloud News Reader Android GPL-3.0 License GitHub OCReader Android GPL-3.0 License GitHub Newsout Android Apache-2.0 License GitHub Readrops Android GPL-3.0 License GitHub CloudNews iOS BSD-2-Clause License GitHub Fiery Feeds iOS, macOS - - Nextnews iOS - - News Checker Google Chrome - GitHub own News Blackberry - - FeedSpider Firefox OS, webOS, LuneOS MIT License GitHub fastReader Windows Phone - - py3status i3wm BSD-3-Clause License GitHub newsboat Unix Terminal MIT License GitHub Newsie Ubuntu Touch GPL-3.0 License GitLab Fuoten Sailfish OS GPL-3.0 License GitHub"},{"location":"clients/#update-clients","title":"Update Clients","text":"<p>An update client uses the News API or the OCC CLI to update the feeds in News.</p> <ul> <li>Python multithread updater</li> </ul>"},{"location":"developer/","title":"Developer","text":"<p>Welcome to the Nextcloud News App developer documentation.</p> <p>News is open for contributions, if you plan to implement a new feature make sure to open a discussion. Describe the feature that you are planing and your first idea how to implement it. This ensures that you don't start working on something which collides with the targets of the maintainers.</p> <p>For small fixes and improvements feel free to directly create a PR, the maintainers are happy to review your code.</p>"},{"location":"developer/#apis","title":"APIs","text":"<p>News offers an API that can be used by clients to synchronize with the server. There are two API declarations, so far only V1 has been fully implemented. Work on V2 has started with low priority.</p> <ul> <li>API-V1.2</li> <li>API-V1.3</li> <li>API-V2</li> </ul>"},{"location":"developer/#coding-style-guidelines","title":"Coding Style Guidelines","text":"<p>The PHP code should all adhere to PSR-2. Note that this is a different codestyle than Nextcloud itself uses. To test the codestyle you can run <code>make phpcs</code>.</p> <p>The application Front End uses Vue 3.5 and the Nextcloud Libraries Vue Components for building the Application running inside your Nextcloud instance. For linting these files, we are using eslint, see the config file. We also have Unit Tests for the components that run with vitest, please ensure these pass when adding new features/fixing bugs.</p>"},{"location":"developer/#developer-setup","title":"Developer setup","text":"<p>TL;DR:</p> <ul> <li>Clone nextcloud server repository</li> <li>run <code>git submodule update --init</code></li> <li>Install the server <code>php ./occ maintenance:install</code></li> <li>Clone the viewer repo if you want to be able to upgrade the setup<ul> <li><code>cd apps &amp;&amp; git clone https://github.com/nextcloud/viewer.git</code></li> </ul> </li> <li>Inside apps dir clone the news app: <code>git clone https://github.com/nextcloud/news.git</code></li> </ul> <p>For more information check the Nextcloud documentation, the setup of a webserver is not strictly needed for backend development.</p> <p>Change into the news directory and run <code>make</code> to build the app, you will need php, composer, node, npm and maybe more.</p> <p>Now you can basically use the news app and test any changes you make on your local development environment. Check out the <code>appinfo/routes.php</code> file and <code>lib/controller/</code> directory for details on API controllers. Or check out <code>package.json</code> for npm scripts and the <code>src/</code> directory for the front end Vue Application.</p>"},{"location":"developer/#docker","title":"Docker","text":"<p>We also have a docker based environment check the README in the <code>docker/</code> directory.</p> <p>This setup is nice since you get a full nextcloud installation and you can open the interface in the browser, which allows you to easily test your changes.</p> <p>There is also a nix-shell config and zellij layout prepared if you are interested in that.</p>"},{"location":"developer/#devcontainer","title":"Devcontainer","text":"<p>Check the README in the .devcontainer directory.</p> <p>If you have issues with setting up a developer environment create a new discussion.</p>"},{"location":"developer/#frontend-tipsorganization","title":"Frontend Tips/Organization","text":"<ul> <li>We use the Nextcloud Vue component library for most of the form controls and navigation</li> <li>Vuex is used for state management, this is similar to Redux and has Actions/Mutations and Getters</li> <li>We are using the Nextcloud Vite configuration and have enabled Typescript support and importing in the Vue components</li> <li>We use ESLint and StyleLint for ensuring correct formatting of the Scripts and HTML</li> </ul>"},{"location":"developer/#testing","title":"Testing","text":"<p>When submitting your PR the tests will be run automatically, try to fix any errors. </p>"},{"location":"developer/#frontend-unit-tests","title":"Frontend Unit Tests","text":"<p>Frontend unit tests are using vitest and can be run with <code>npm run test</code>.</p>"},{"location":"developer/#api-and-cli-integration-tests","title":"API and CLI Integration Tests","text":"<p>We use bats to run integration tests against the API and the cli.</p> <p>Check how to install bats on your system in the official documentation.</p> <p>You also need to pull the submodules of the news repo.</p> <pre><code>git submodules update --init\n</code></pre> <p>The cli tests expect that the feeds are reachable at <code>http://localhost:8090</code>, to achieve that you can use <code>make feed-server &amp;</code> the <code>&amp;</code> means it'll run in the background.</p> <p>Now the test feeds will be reachable for bats. Run the tests by executing <code>bats tests/command</code> you can also only run specific tests for example <code>bats tests/command/feeds.bats</code>.</p> <p>For the API tests you need to run a second php server or have another web server that provides Nextcloud and the News App. The tests expect to find Nextcloud at <code>http://localhost:8080</code> You can do this by running <code>make nextcloud-server</code>.</p> <p>The bats tests can be executed like this <code>bats tests/api</code>.</p>"},{"location":"install/","title":"Installation/Update &amp; Uninstall","text":""},{"location":"install/#dependencies","title":"Dependencies","text":"<ul> <li>64bit Operating System</li> <li>PHP &gt;= 8.2</li> <li>Nextcloud (current stable version)</li> <li>libxml &gt;= 2.7.8</li> </ul> <p>You also need some PHP extensions:</p> <ul> <li>json</li> <li>simplexml</li> <li>xml</li> <li>dom</li> <li>curl</li> <li>iconv</li> </ul>"},{"location":"install/#supported-databases","title":"Supported Databases","text":"<ul> <li>PostgreSQL &gt;= 10</li> <li>MariaDB &gt;= 10.2</li> <li>MySQL &gt;= 8.0</li> <li>SQLite (discouraged)</li> </ul> <p>Also see the Nextcloud documentation. Oracle is currently not supported by News.</p>"},{"location":"install/#performance-notices","title":"Performance Notices","text":"<ul> <li>Use MySQL/MariaDB or PostgreSQL for better database performance</li> <li>Use the updater script to thread and speed up the update</li> </ul>"},{"location":"install/#cache","title":"Cache","text":"<p>News and it's libraries require a writeable temporary directory used as cache. The base directory depends on your system. You can configure a custom directory if you want.</p> <p>In most cases the base directory will be <code>/tmp</code>. News will create a folder <code>news-$instanceID</code> the instance ID is defined by Nextcloud.</p> <p>Inside that folder a subfolder <code>cache</code> is created, inside this cache folder news and libraries will try to create cache directories for caching images, html and more.</p> <p>You need to ensure that your web-server user can write to that directory.</p>"},{"location":"install/#before-you-installupdate-the-news-app","title":"Before you install/update the News app","text":"<p>Before you install the app do the following:</p> <ul> <li>Check that your installation fulfills the requirements listed above</li> <li>Set up Nextcloud Background Jobs to enable feed updates.</li> </ul> <p>Then proceed to install the app either from an archive (zip/tar.gz) or clone it from the repository using git</p>"},{"location":"install/#installing-from-the-app-store","title":"Installing from the app store","text":"<p>This is the easiest solution: Simply go the apps page (section: \"Multimedia\") and enable the News app</p>"},{"location":"install/#installing-from-archive","title":"Installing from archive","text":"<ul> <li>Go to the Nextcloud News GitHub releases page and download the latest release/archive to your server</li> <li>The news.tar.gz file contains the compiled and signed app files, if you install from source you have to build the app on your own.</li> <li>On your server, check if there is a folder called nextcloud/apps/news. If there is one, delete it.</li> <li>Extract the downloaded archive to the nextcloud/apps/ folder.</li> <li>Remove the version from the extracted folder (e.g. rename nextcloud/apps/news-4.0.3/ to nextcloud/apps/news/</li> <li> <p>If you are a version greater than or equal to 8.0.0 and downloaded the Source code zip or tar.gz, you need to install the JavaScript and PHP dependencies and compile the JavaScript first. On your terminal, change into the nextcloud/apps/news/ directory and run the following command (requires node &gt;5.6, npm, curl, make and which):</p> <pre><code>sudo -u www-data make  # www-data might vary depending on your distribution\n</code></pre> </li> <li> <p>Finally make sure that the nextcloud/apps/news directory is owned by the web server user</p> <pre><code>sudo chown -R www-data:www-data nextcloud/apps/news  # www-data:www-data might vary depending on your distribution\n</code></pre> </li> <li> <p>Activate the News app in the apps menu</p> </li> </ul>"},{"location":"install/#installing-from-git-development-version","title":"Installing from Git (development version)","text":""},{"location":"install/#build-dependencies","title":"Build Dependencies","text":"<p>These Dependencies are only relevant if you want to build the source code:</p> <ul> <li>make</li> <li>which</li> <li>Node.js &gt;= 6</li> <li>npm</li> <li> <p>composer</p> </li> <li> <p>The master branch will always be stable in conjunction with the latest master branch from Nextcloud</p> </li> <li>JavaScript and PHP libraries are not included anymore since 8.0.0 and will require you to run make after updating/installing the app</li> <li> <p>In your terminal go into the nextcloud/apps/ directory and then run the following command:</p> <pre><code>git clone https://github.com/nextcloud/news.git\ncd news\nmake\n</code></pre> </li> <li> <p>If you are using a stable Nextcloud release, stay with the latest git tag release which is running on your version. To get an overview over all existing tags run:</p> <pre><code>git tag\n</code></pre> </li> </ul> <p>You can switch to a release which will be supported on your installation by running:</p> <pre><code>  git checkout tags/TAG\n  make  # if News version &gt;= 8.0.0\n</code></pre> <p>For instance, to use the 5.2.8 release, run:</p> <pre><code>  git checkout tags/5.2.8\n</code></pre> <ul> <li>Activate the News app in the apps menu</li> </ul> <p>To update the News app use change into the nextcloud/apps/news/ directory using your terminal and then run:</p> <pre><code>git pull --rebase origin master\nmake\n</code></pre>"},{"location":"install/#uninstall-with-cleanup","title":"Uninstall with cleanup","text":"<p>First uninstall the app via the web-interface or via occ:</p> <pre><code>./occ app:remove news\n</code></pre> <p>This currently does not remove any of the database tables. Data in your <code>/tmp</code> directory will be automatically deleted by the OS. If you changed the temporary directory for Nextcloud you need to check on your own.</p> <p>Careful, this next part is only intended for admins, that know what they are doing.</p> <p>To remove the tables from the DB we drop the tables of News. Your installation might have a different prefix than <code>oc_</code> but it is the default in most installations. Connect to your DB and execute the commands. Don't forget to switch to the right database. For example in mysql: <code>use nextcloud;</code></p> <pre><code>DROP TABLE oc_news_items;\nDROP TABLE oc_news_feeds;\nDROP TABLE oc_news_folders;\n</code></pre> <p>Then we remove the traces in the migrations table.</p> <pre><code>DELETE FROM oc_migrations WHERE app='news';\n</code></pre> <p>Next delete the app configuration.</p> <pre><code>DELETE FROM oc_appconfig WHERE appid = 'news';\n</code></pre> <p>And finally remove the jobs from the job table. The last two lines are only needed for older installations.</p> <pre><code>DELETE FROM oc_jobs WHERE class='OCA\\\\News\\\\Cron\\\\UpdaterJob';\nDELETE FROM oc_jobs WHERE class='OCA\\\\News\\\\Cron\\\\Updater';\nDELETE FROM oc_jobs WHERE argument='[\"OCA\\\\\\\\News\\\\\\\\Cron\\\\\\\\Updater\",\"run\"]';\n</code></pre> <p>Now nothing is left from News in your Nextcloud installation.</p>"},{"location":"maintenance/","title":"Maintenance","text":""},{"location":"maintenance/#release","title":"Release","text":"<p>Releases are created automatically by GitHub Actions. A release is triggered via a GitHub Release. The GitHub Action will then start a build based on the git tag. A release can only be approved by @Grotax or @SMillerDev. An admin of the Nextcloud organization can always overwrite these settings. The private key is stored as environmental secret in GitHub. The owner of the private key is @Grotax.</p>"},{"location":"maintenance/#support","title":"Support","text":""},{"location":"maintenance/#php","title":"PHP","text":"<p>While the app should try to support all PHP versions that Nextcloud currently supports, the real focus when deciding to cut a PHP version should be on maintenance burden. Users are nice, but devs should be a priority in decisions that are likely to impact them significantly.</p>"},{"location":"maintenance/#issues","title":"Issues","text":"<ul> <li> <p>Bug reports without test cases (feed URL and action is enough) can be closed with or without comment.</p> </li> <li> <p>Feature requests without thoughtful commentary or pull request can be closed with or without comment, unless a developer is interested to support such a feature.</p> </li> <li> <p>Issues without activity in the last 30 days can be closed with or without comment. If this is a bug you care about that isn't getting attention, fix it. If you're good enough to understand the bug, you're good enough to fix it.</p> </li> </ul> <p>Largely inspired by https://gist.github.com/ryanflorence/124070e7c4b3839d4573</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This is a brief list of common issues that come up with NextCloud News.</p>"},{"location":"troubleshooting/#my-browser-shows-a-mixed-content-warning-connection-is-not-secure","title":"My browser shows a mixed content warning (Connection is Not Secure)","text":"<p>If you are serving your Nextcloud over HTTPS your browser will very likely warn you with a yellow warnings sign about your connection not being secure.</p> <ul> <li>Chrome will show no green HTTPS lock sign.</li> <li>Firefox will show you the following image Mixed Passive Content </li> </ul> <p>Note that this warning is not red and won't block the page like the following images which signal a serious issue:</p> <ul> <li>Chrome </li> <li>Firefox </li> </ul>"},{"location":"troubleshooting/#what-is-the-cause-of-the-yellow-error-message","title":"What is the cause of the (yellow) error message?","text":"<p>This warning is caused by mixed passive content and means that your page loads passive resources from non HTTPS resources, such as:</p> <ul> <li>Images</li> <li>Video/Audio</li> <li>Some Ads</li> </ul> <p>This allows a possible attacker to perform a MITM (man-in-the-middle) attack by serving you different images or audio/video.</p>"},{"location":"troubleshooting/#why-doesnt-the-news-app-fix-it","title":"Why doesn't the News app fix it?","text":"<p>The News app fully prevents mixed active content by only allowing HTTPS iframes from known locations; other possible mixed active content elements such as &lt;script\\&gt; are stripped from the feed. Because images and audio/video are an integral part of a feed, we can not simply strip them.</p> <p>Since an attacker can not execute code in contrast to mixed active content, but only replace images/audio/video in your feed reader, this is not considered to be a security issue. If, for whatever reason (e.g. feed which would allow fishing), this is a security problem for you, contact the specific feed provider and ask him to serve his feed content over HTTPS.</p>"},{"location":"troubleshooting/#why-dont-you-simply-use-an-https-imageaudiovideo-proxy","title":"Why don't you simply use an HTTPS image/audio/video proxy?","text":"<p>For the same reason that we can't fix non HTTPS websites: It does not fix the underlying issue, but only silences it. If you are using an image HTTPS proxy, an attacker can simply attack your image proxy since the proxy fetches insecure content. Even worse: if your image proxy serves these images from the same domain as your Nextcloud installation, you are vulnerable to XSS via SVG images. In addition, people feel safe when essentially they are not.</p> <p>Since most people don't understand mixed content and don't have two domains and a standalone server for the image proxy, it is very likely they will choose to host it under the same domain.</p> <p>Because we care about our users' security and don't want to hide security warnings, we won't fix (aka silence) this issue.</p> <p>The only fix for this issue is that feed providers serve their content over HTTPS.</p>"},{"location":"troubleshooting/#i-am-getting-exception-someclass-does-not-exist-errors-in-my-nextcloudlog","title":"I am getting: Exception: Some\\Class does not exist errors in my nextcloud.log","text":"<p>This is very often caused by missing or old files, e.g. by failing to upload all the News app files or errors during installation. Before you report a bug, please recheck if all files from the archive are in place and accessible.</p>"},{"location":"troubleshooting/#feeds-not-updated","title":"Feeds not updated","text":"<p>Feeds can be updated using Nextcloud's system cron or an external updater via the API. The feed update is not run in Webcron and AJAX cron mode!</p>"},{"location":"troubleshooting/#validating-using-system-cron","title":"Validating Using System Cron","text":"<p>Info</p> <p>This requires Nextcloud 26 or newer and News 24.0.0 or newer.</p> <p>Follow this checklist:</p> <ul> <li>Check admin settings of Nextcloud, was the last cron execution ok.</li> <li>Check the logs for errors.</li> <li>Does your cache configuration work?</li> <li>Check the News admin settings, system cron is used to update news.</li> <li>You should see a info card at the top, which will tell you when the last job execution was.</li> <li>If the card is red it is very likely that the update job is stuck.</li> <li>If it is green then maybe only some feeds are failing to update, check the Nextcloud logs.</li> </ul> <p>If you believe the job is stuck you can reset it. For further steps you need to use occ.</p> <p>You can check again the status of the job. (replace <code>www-data</code> with your httpd user)</p> <pre><code>sudo -u www-data php ./occ news:updater:job\nChecking update Status\nLast Execution was 2023-03-20 12:20:03 UTC\n</code></pre> <p>The same check that is done in the News admin settings can be done using occ too. Adding the <code>--check-elapsed</code> option displays the time elapsed since the last execution, and if it's considered too long ago, a message will be displayed, and the command returns with exit code 2. This can be used in scripts to send an alert for example.</p> <pre><code>$ sudo -u www-data php ./occ news:updater:job --check-elapsed\nChecking update Status\nLast Execution was 2023-03-20 12:20:03 UTC\n8 hours, 21 minutes, 20 seconds ago\nSomething is wrong with the news cronjob, execution delay exceeded the configured interval.\n</code></pre> <p>If you think the job is stuck you can reset it, this may lead to issues if the job is currently running!</p> <pre><code>sudo -u www-data php ./occ news:updater:job --reset\nChecking update Status\nLast Execution was 2023-03-20 12:20:03 UTC\nAttempting to reset the job.\nDone, job should execute on next schedule.\n</code></pre> <p>The output of the command should have changed.</p> <pre><code>sudo -u www-data php ./occ news:updater:job\nChecking update Status\nLast Execution was 1970-01-01 00:00:00 UTC\n</code></pre> <p>After some time has passed the timestamp should be close to the current time.</p> <p>If this did not help, check the logs and open a issue or discussion on GitHub.</p>"},{"location":"troubleshooting/#outdated-steps","title":"Outdated Steps","text":"<p>Follow these steps if you are running an older version of News and Nextcloud.</p> <ul> <li>Check if you are using the system cron (Cron) setting on the admin page. AJAX and Web cron will not update feeds</li> <li>Check if the cronjob exists with <code>crontab -u www-data -e</code> (replace www-data with your httpd user)</li> <li>Check the file permissions of the cron.php file and if www-data (or whatever your httpd user is called like) can read and execute that script</li> <li>Check if you can execute the cron with <code>sudo -u www-data php -f nextcloud/cron.php</code> (replace www-data with your httpd user)</li> <li>Check your <code>data/nextcloud.log</code> for errors</li> <li>Check if the cronjob is ever executed by placing an <code>error_log('updating');</code> in the background job file. If the cronjob runs, there should be an updating log statement in your httpd log.</li> <li>If there is no updating statement in your logs check if your cronjob is executed by executing a different script</li> <li>Check if the oc_jobs table has a reserved_at entry with a value other than 0. If it does for whatever reason, set it to 0. You can check this by executing:</li> </ul> <pre><code>SELECT * from oc_jobs WHERE class LIKE '%News%' ORDER BY id;\n</code></pre> <p>You will get two rows where column class will be <code>OCA\\News\\Cron\\Updater</code> and <code>OCA\\News\\Cron\\UpdaterJob</code>.</p> <p>Info</p> <p>In newer versions of News (21.x.x) the old job OCA\\News\\Cron\\Updater was removed from the DB.</p> <p>Reset the reserved_at by executing</p> <pre><code>UPDATE oc_jobs SET reserved_at = 0 WHERE id = &lt;id from above SELECT statement&gt;;\n</code></pre> <p>If your cron works fine, but Nextcloud's cronjobs are never executed, file a bug in server</p>"},{"location":"troubleshooting/#using-external-updater","title":"Using External Updater","text":"<ul> <li>Check if your configuration is set to not use the system cron.</li> <li>Consult the documentation of the updater</li> <li>Check your data/nextcloud.log for errors</li> </ul>"},{"location":"troubleshooting/#database-table-grows-too-big","title":"Database table grows too big","text":"<p>If your users have subscribed to some high-volume feeds where a lot of items remain unread, this can lead to an oversized news table over time. As a consequence, the database upgrade of the news app can take several hours, during which Nextcloud cannot be used.</p> <p>By default, Nextcloud News purges old news items above a certain threshold each time it fetches new news items. The maximum number of items per feed that should be kept during the purging can be defined through the \u201cMaximum read count per feed\u201d setting in the admin UI or the <code>autoPurgeCount</code> value in the config. Additionally you may enable the option to also purge unread items <code>purgeUnread</code>. This is useful if your users have large amounts of unread items. Starred items are always exempt from purging.</p> <p>The command <code>occ news:updater:after-update [--purge-unread] [&lt;purge-count&gt;]</code> can be used to manually purge old news items across the instance. With the <code>--purge-unread option</code>, unread items are also purged (starred items are still exempt). If <code>purge-count</code> is not specified, the configured <code>autoPurgeCount</code> is used.</p> <p>The purge count only applies to the items that are purged. For example, when purging a feed that has 100 unread items, 100 starred read items and 100 unstarred read items, using a purge-count of 50 would keep all unread and starred items and the latest 50 read items. Using a <code>purge-count</code> of 50 along with <code>--purge-unread</code> would keep the all starred items plus the latest 50 from the set of unread and read items.</p>"},{"location":"troubleshooting/#missing-4-byte-support-sqlstate22007-invalid-datetime-format-1366-incorrect-string-value","title":"Missing 4-byte support SQLSTATE[22007]: Invalid datetime format: 1366 Incorrect string value:","text":"<p>This is likely caused by your feed using emojis in the feed title or text.</p> <p>The DB is then not able to store the feed and runs into strange decoding errors.</p> <p>You need to convert your DB to support 4 bytes, check the Nextcloud documentation.</p> <p>References #1165 #526</p>"},{"location":"user/","title":"User","text":"<p>Welcome to the User documentation of News.</p>"},{"location":"user/#user-interface","title":"User interface","text":""},{"location":"user/#feed-update-errors","title":"Feed Update Errors","text":"<p>If a feed fails to update eight times in a row, the interface displays a red bubble at the feed showing the number of errors since the last successful update. When hovering the mouse pointer over the red bubble, the last error message is displayed.</p>"},{"location":"user/#subscribe","title":"Subscribe","text":""},{"location":"user/#web-address","title":"Web address","text":"<p>The URL of the RSS feed you want to add. Make sure the URL points directly to the RSS feed or to a website that supports RSS. If the feed is not obvious, the website is searched when auto discover is enabled (see below).</p>"},{"location":"user/#folder","title":"Folder","text":"<p>Specify a folder name to organize the feed. If you leave this field blank, the feed will be added without a folder. Use folders to group related feeds for easier navigation.</p>"},{"location":"user/#credentials","title":"Credentials","text":"<p>Provide a username and password if required for a feed. Please note that the password will be stored in plain text, meaning anyone with access to the server or database will be able to view it.</p>"},{"location":"user/#auto-discover-feed","title":"Auto discover Feed","text":"<p>Check this option if you want the app to automatically detect the RSS feed from the entered URL. This is useful when you\u2019re unsure of the exact feed URL, as the system will scan the provided website for RSS links.</p>"},{"location":"user/#feed-options","title":"Feed options","text":""},{"location":"user/#mark-read","title":"Mark Read","text":"<p>Mark the feed as read.</p>"},{"location":"user/#pin-to-topunpin-from-top","title":"Pin to Top/Unpin from Top","text":"<p>The feed will be displayed at the top of the list.</p>"},{"location":"user/#default-ordernewest-firstoldest-first","title":"Default Order/Newest First/Oldest First","text":"<p>Sets the sorting order for displaying this feed. The default order is set in the settings. Note: For technical reasons, the sorting is based on the date the article was added to the database, not the publication date.</p>"},{"location":"user/#enabledisable-full-text","title":"Enable/Disable Full Text","text":"<p>When enabled, articles will be fully retrieved from the website during the next fetch, instead of using the RSS feed.</p>"},{"location":"user/#mark-as-unreadkeep-read-status-on-update","title":"Mark as unread/Keep read status on update","text":"<ul> <li>If Mark as unread on update is selected, previously read articles will be marked as unread when updated.</li> <li>If Keep read status on update is selected, changes to articles will be ignored.</li> </ul>"},{"location":"user/#rename","title":"Rename","text":"<p>Rename the feed.</p>"},{"location":"user/#move","title":"Move","text":"<p>Move the feed to a different location.</p>"},{"location":"user/#delete","title":"Delete","text":"<p>Delete the feed.</p>"},{"location":"user/#open-feed-url","title":"Open Feed URL","text":"<p>Open the feed in a new tab or window.</p>"},{"location":"user/#settings","title":"Settings","text":""},{"location":"user/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Displays the keys for keyboard navigation.</p>"},{"location":"user/#article-feed-information","title":"Article Feed Information","text":"<p>Opens a table with information about the article feeds:</p> <ul> <li> <p>Last update: Time when the feed was last downloaded.</p> </li> <li> <p>Next update: Time when the next feed update will be done.   (Only if activated in the admin settings, otherwise the regular update interval is used.)</p> </li> <li> <p>Articles per update: Maximum number of articles reached in a feed update.</p> </li> <li> <p>Error Count: Number of errors that have occurred since the last successful feed update.   (When hovering the mouse pointer over the error count in a row, the last error message is displayed.)</p> </li> </ul>"},{"location":"user/#display-mode","title":"Display mode","text":"<ul> <li> <p>Default Mode:   Displays the title and preview text across multiple lines per row.</p> </li> <li> <p>Compact Mode:   Depending on the split mode, the title and preview text are displayed on a single line per row.</p> </li> <li> <p>Screen Reader Mode:   A specialized mode optimized for text-to-speech programs (e.g., Orca).   In this mode, visual elements are not relevant.   Key features:</p> <ul> <li>Keyboard navigation focuses on the article link when switching between articles.</li> <li>During tab navigation, changing the article automatically selects the newly focused article.</li> </ul> </li> </ul>"},{"location":"user/#split-mode","title":"Split mode","text":"<ul> <li> <p>Vertical:   The default three-column layout, with navigation, article list, and article displayed side by side.</p> </li> <li> <p>Horizontal:   Navigation on the left, with the article list and article stacked vertically on the right.</p> </li> <li> <p>Off:   A two-row layout where navigation and the article list are side by side. The selected article is displayed over the article list.</p> </li> </ul>"},{"location":"user/#disable-mark-read-through-scrolling","title":"Disable Mark Read Through Scrolling","text":"<p>Articles are not marked as read while scrolling.</p>"},{"location":"user/#show-all-articles","title":"Show All Articles","text":"<p>All available articles are always displayed.</p>"},{"location":"user/#reverse-ordering-oldest-on-top","title":"Reverse Ordering (Oldest on Top)","text":"<p>Reverses the order so that older articles are displayed first. Note: For technical reasons, the sorting is based on the date the article was added to the database, not the publication date.</p>"},{"location":"user/#disable-automatic-refresh","title":"Disable Automatic Refresh","text":"<p>This option disables automatic feed synchronization with the backend, which occurs every 60 seconds.</p>"},{"location":"user/#abonnements-opml","title":"Abonnements (OPML)","text":"<p>Feed lists in OPML format can be imported and exported here. Feeds that cannot be loaded during the import will be ignored.</p>"},{"location":"user/#using-news-with-clients","title":"Using News with Clients","text":""},{"location":"user/#todo","title":"TODO","text":"<p>This documentation is work in progress. explain sync and link to clients page</p>"},{"location":"api/api-v1-2/","title":"External API v1-2","text":"<p>The News app 1.2 offers a RESTful API</p>"},{"location":"api/api-v1-2/#api-stability-contract","title":"API stability contract","text":"<p>The API level will change if the following occurs:</p> <ul> <li>A field of an object is removed</li> <li>A field of an object has a different datatype</li> <li>The meaning of an API call changes</li> </ul> <p>The API level will not change if:</p> <ul> <li>The app version is changed (e.g. 4.0.1.2 instead of 4.0 or 4.001)</li> <li>A new attribute is added (e.g. each item gets a new field \"something\": 1)</li> <li>The order of the JSON attributes is changed on any level (e.g. \"id\":3 is not the first field anymore, but the last)</li> </ul> <p>You have to design your app with these things in mind!:</p> <ul> <li>Don't depend on the order of object attributes. In JSON it does not matter where the object attribute is since you access the value by name, not by index</li> <li>Don't limit your app to the currently available attributes. New ones might be added. If you don't handle them, ignore them</li> <li>Use a library to compare versions, ideally one that uses semantic versioning</li> </ul>"},{"location":"api/api-v1-2/#authentication-basics","title":"Authentication &amp; Basics","text":"<p>Because REST is stateless you have to send user and password each time you access the API. Therefore running Nextcloud with SSL is highly recommended otherwise everyone in your network can log your credentials.</p> <p>The base URL for all calls is:</p> <pre><code>https://yournextcloud.com/index.php/apps/news/api/v1-2/\n</code></pre> <p>All defined routes in the Specification are appended to this url. To access all feeds for instance use this url:</p> <pre><code>https://yournextcloud.com/index.php/apps/news/api/v1-2/feeds\n</code></pre> <p>Credentials need to be passed as an HTTP header using HTTP basic auth:</p> <pre><code>Authorization: Basic $CREDENTIALS\n</code></pre> <p>where $CREDENTIALS is:</p> <pre><code>base64(USER:PASSWORD)\n</code></pre>"},{"location":"api/api-v1-2/#how-to-sync","title":"How To Sync","text":"<p>This is a small overview over how you should sync your articles with the Nextcloud News app. For more fine-grained details about the API see further down.</p> <p>All routes are given relative to the base API url (e.g.: https://yournextcloud.com/index.php/apps/news/api/v1-2)</p>"},{"location":"api/api-v1-2/#initial-sync","title":"Initial Sync","text":"<p>The initial sync happens, when a user adds a Nextcloud account in your app. In that case you should fetch all feeds, folders and unread or starred articles from the News app. Do not fetch all articles, not only because it syncs faster, but also because the user is primarily interested in unread articles. To fetch all unread and starred articles, you must call 4 routes:</p> <ul> <li>unread articles: GET /items?type=3&amp;getRead=false&amp;batchSize=-1</li> <li>starred articles: GET /items?type=2&amp;getRead=true&amp;batchSize=-1</li> <li>folders: GET /folders</li> <li>feeds: GET /feeds</li> </ul> <p>The JSON response structures can be viewed further down.</p>"},{"location":"api/api-v1-2/#syncing","title":"Syncing","text":"<p>When syncing, you want to push read/unread and starred/unstarred items to the server and receive new and updated items, feeds and folders. To do that, call the following routes:</p> <ul> <li>Notify the News app of unread articles: PUT /items/unread/multiple {\"items\": [1, 3, 5] }</li> <li>Notify the News app of read articles: PUT /items/read/multiple {\"items\": [1, 3, 5]}</li> <li>Notify the News app of starred articles: PUT /items/starred/multiple {\"items\": [{\"feedId\": 3, \"guidHash\": \"adadafasdasd1231\"}, ...]}</li> <li>Notify the News app of unstarred articles: PUT /items/unstarred/multiple {\"items\": [{\"feedId\": 3, \"guidHash\": \"adadafasdasd1231\"}, ...]}</li> <li>Get new folders: GET /folders</li> <li>Get new feeds: GET /feeds</li> <li>Get new items and modified items: GET /items/updated?lastModified=12123123123&amp;type=3</li> </ul>"},{"location":"api/api-v1-2/#accessing-api-from-a-web-application","title":"Accessing API from a web application","text":"<p>News 1.401 implements CORS which allows web applications to access the API. To access the API in a webapp you need to send the correct authorization header instead of simply putting auth data into the URL!. An example request in jQuery would look like this:</p> <pre><code>$.ajax({\n type: 'GET',\n url: 'https://yournextcloud.com/index.php/apps/news/api/v1-2/version',\n contentType: 'application/json',\n success: function (response) {\n  // handle success\n },\n error: function () {\n  // handle errors\n },\n beforeSend: function (xhr) {\n  var username = 'john';\n  var password = 'doe';\n  var auth = btoa(username + ':' + password);\n  xhr.setRequestHeader('Authorization', 'Basic ' + auth);\n }\n});\n</code></pre> <p>An example with AngularJS would look like this:</p> <pre><code>angular.module('YourApp', [])\n    .config(['$httpProvider', '$provide', function ($httpProvider, $provide) {\n        $provide.factory('AuthInterceptor', ['Credentials', '$q', function (Credentials, $q) {\n            return {\n                request: function (config) {\n                    // only set auth headers if url matches the api url\n                    if(config.url.indexOf(Credentials.url) === 0) {\n                        auth = btoa(Credentials.userName + ':' + Credentials.password);\n                        config.headers['Authorization'] = 'Basic ' + auth;\n                    }\n                    return config || $q.when(config);\n                }\n            };\n        }]);\n        $httpProvider.interceptors.push('AuthInterceptor');\n    }])\n    .factory('Credentials', function () {\n        return {\n            userName: 'user',\n            password: 'password',\n            url: 'https://yournextcloud.com/index.php/apps/news/api'\n        };\n    })\n    .run(['$http', function($http) {\n        $http({\n            method: 'GET',\n            url: 'https://yournextcloud.com/index.php/apps/news/api/v1-2/version'\n        }).success(function (data, status, header, config) {\n            // handle success\n        }).error(function (data, status, header, config) {\n            // handle error\n        });\n    }]);\n</code></pre>"},{"location":"api/api-v1-2/#input","title":"Input","text":"<p>In general the input parameters can be in the URL or request body, the App Framework doesnt differentiate between them.</p> <p>So JSON in the request body like:</p> <pre><code>{\n  \"id\": 3\n}\n</code></pre> <p>will be treated the same as</p> <pre><code>/?id=3\n</code></pre> <p>It is recommended though that you use the following convention:</p> <ul> <li>GET: parameters in the URL</li> <li>POST: parameters as JSON in the request body</li> <li>PUT: parameters as JSON in the request body</li> <li>DELETE: parameters as JSON in the request body</li> </ul>"},{"location":"api/api-v1-2/#output","title":"Output","text":"<p>The output is JSON.</p>"},{"location":"api/api-v1-2/#api-endpoints","title":"API Endpoints","text":""},{"location":"api/api-v1-2/#folders","title":"Folders","text":""},{"location":"api/api-v1-2/#get-all-folders","title":"Get all folders","text":"<ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /folders</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"folders\": [\n    {\n      \"id\": 4,\n      \"name\": \"Media\"\n    }, // etc\n  ]\n}\n</code></pre>"},{"location":"api/api-v1-2/#create-a-folder","title":"Create a folder","text":"<p>Creates a new folder and returns a new folder object</p> <ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /folders</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"name\": \"folder name\"\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 409: If the folder exists already</li> <li>HTTP 422: If the folder name is invalid (for instance empty)</li> <li>Returns:</li> </ul> <pre><code>{\n  \"folders\": [\n    {\n      \"id\": 4,\n      \"name\": \"Media\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api/api-v1-2/#delete-a-folder","title":"Delete a folder","text":"<p>Deletes a folder with the id folderId and all the feeds it contains</p> <ul> <li>Status: Implemented</li> <li>Method: DELETE</li> <li>Route: /folders/{folderId}</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the folder does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#rename-a-folder","title":"Rename a folder","text":"<p>Only the name can be updated</p> <ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /folders/{folderId}</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"name\": \"folder name\"\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 409: If the folder name does already exist</li> <li>HTTP 404: If the folder does not exist</li> <li>HTTP 422: If the folder name is invalid (for instance empty)</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-items-of-a-folder-as-read","title":"Mark items of a folder as read","text":"<ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /folders/{folderId}/read</li> <li>Parameters:</li> </ul> <pre><code>{\n    // mark all items read lower than equal that id\n    // this is mean to prevent marking items as read which the client/user does not yet know of\n    \"newestItemId\": 10\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#feeds","title":"Feeds","text":""},{"location":"api/api-v1-2/#sanitation","title":"Sanitation","text":"<p>The following attributes are not sanitized meaning: including them in your web application can lead to  XSS:</p> <ul> <li>title</li> <li>link</li> </ul>"},{"location":"api/api-v1-2/#get-all-feeds","title":"Get all feeds","text":"<ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /feeds</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"feeds\": [\n    {\n      \"id\": 39,\n      \"url\": \"http://feeds.feedburner.com/oatmealfeed\",\n      \"title\": \"The Oatmeal - Comics, Quizzes, &amp; Stories\",\n      \"faviconLink\": \"http://theoatmeal.com/favicon.ico\",\n      \"added\": 1367063790,\n      \"folderId\": 4,\n      \"unreadCount\": 9,\n      \"nextUpdateTime\": 2071387335,\n      \"ordering\": 0, // 0 means no special ordering, 1 means oldest first, 2 newest first, new in 5.1.0\n      \"link\": \"http://theoatmeal.com/\",\n      \"pinned\": true // if a feed should be sorted before other feeds, added in 6.0.3,\n      \"updateErrorCount\": 0, // added in 8.6.0, 0 if no errors occurred during the last update,\n                             // otherwise is incremented for each failed update.\n                             // Once it reaches a threshold, a message should be displayed to the user\n                             // indicating that the feed has failed to update that many times.\n                             // The webapp displays the message after 50 failed updates\n      \"lastUpdateError\": \"error message here\"  // added in 8.6.0, empty string or null if no update\n                                               // error happened, otherwise contains the last update error message\n    }, // etc\n  ],\n  \"starredCount\": 2,\n  \"newestItemId\": 3443  // only sent if there are items\n}\n</code></pre>"},{"location":"api/api-v1-2/#create-a-feed","title":"Create a feed","text":"<p>Creates a new feed and returns the feed</p> <ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /feeds</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"url\": \"http:\\/\\/www.cyanogenmod.org\\/wp-content\\/themes\\/cyanogenmod\\/images\\/favicon.ico\",\n  \"folderId\": 81 //  id of the parent folder, null for root\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 409: If the feed exists already</li> <li>HTTP 422: If the feed cant be read (most likely contains errors)</li> <li>Returns:</li> </ul> <pre><code>{\n  \"feeds\": [\n    {\n      \"id\": 39,\n      \"url\": \"http://feeds.feedburner.com/oatmealfeed\",\n      \"title\": \"The Oatmeal - Comics, Quizzes, &amp; Stories\",\n      \"faviconLink\": \"http://theoatmeal.com/favicon.ico\",\n      \"added\": 1367063790,\n      \"nextUpdateTime\": 2071387335,\n      \"folderId\": 4,\n      \"unreadCount\": 9,\n      \"ordering\": 0, // 0 means no special ordering, 1 means oldest first, 2 newest first, new in 5.1.0\n      \"link\": \"http://theoatmeal.com/\",\n      \"pinned\": true // if a feed should be sorted before other feeds, added in 6.0.3\n    }\n  ],\n  \"newestItemId\": 23 // only sent if there are items\n}\n</code></pre>"},{"location":"api/api-v1-2/#delete-a-feed","title":"Delete a feed","text":"<p>Deletes a feed with the id feedId and all of its  items</p> <ul> <li>Status: Implemented</li> <li>Method: DELETE</li> <li>Route: /feeds/{feedId}</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#move-a-feed-to-a-different-folder","title":"Move a feed to a different folder","text":"<ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /feeds/{feedId}/move</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"folderId\": null //  id of the parent folder, null for root\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#rename-a-feed","title":"Rename a feed","text":"<ul> <li>Status: Implemented in 1.807</li> <li>Method: PUT</li> <li>Route: /feeds/{feedId}/rename</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"feedTitle\": \"New Title\"\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-items-of-a-feed-as-read","title":"Mark items of a feed as read","text":"<ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /feeds/{feedId}/read</li> <li>Parameters:</li> </ul> <pre><code>{\n  // mark all items read lower than equal that id\n  // this is mean to prevent marking items as read which the client/user does not yet know of\n  \"newestItemId\": 10\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#items","title":"Items","text":""},{"location":"api/api-v1-2/#sanitation_1","title":"Sanitation","text":"<p>The following attributes are not sanitized meaning: including them in your web application can lead to  XSS:</p> <ul> <li>title</li> <li>author</li> <li>url</li> <li>enclosureMime</li> <li>enclosureLink</li> <li>mediaThumbnail</li> <li>mediaDescription</li> </ul>"},{"location":"api/api-v1-2/#types","title":"Types","text":"Name Default Types author null string|null body string|null contentHash string|null enclosureLink string|null enclosureMime string|null feedId int fingerprint string|null guid string guidHash string id int lastModified \\\"0\\\" string|null mediaDescription string|null mediaThumbnail string|null pubDate int|null rtl false bool starred false bool title string|null unread false bool updatedDate string|null url string|null"},{"location":"api/api-v1-2/#get-items","title":"Get items","text":"<ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /items</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"batchSize\": 10, //  the number of items that should be returned, defaults to -1, new in 5.2.3: -1 returns all items\n  \"offset\": 30, // only return older (lower than equal that id) items than the one with id 30\n  \"type\": 1, // the type of the query (Feed: 0, Folder: 1, Starred: 2, All: 3)\n  \"id\": 12, // the id of the folder or feed, Use 0 for Starred and All\n  \"getRead\": true, // if true it returns all items, false returns only unread items\n  \"oldestFirst\": false  // implemented in 3.002, if true it reverse the sort order\n}\n</code></pre> <ul> <li>Returns:</li> </ul> <pre><code>{\n  \"items\": [\n    {\n      \"id\": 3443,\n      \"guid\": \"http://grulja.wordpress.com/?p=76\",\n      \"guidHash\": \"3059047a572cd9cd5d0bf645faffd077\",\n      \"url\": \"http://grulja.wordpress.com/2013/04/29/plasma-nm-after-the-solid-sprint/\",\n      \"title\": \"Plasma-nm after the solid sprint\",\n      \"author\": \"Jan Grulich (grulja)\",\n      \"pubDate\": 1367270544,\n      \"body\": \"&lt;p&gt;At first I have to say...&lt;/p&gt;\",\n      \"enclosureMime\": null,\n      \"enclosureLink\": null,\n      \"mediaThumbnail\": null, // new in 14.1.4-rc1\n      \"mediaDescription\": null, // new in 14.1.4-rc1\n      \"feedId\": 67,\n      \"unread\": true,\n      \"starred\": false,\n      \"rtl\": false, // new in 6.0.2\n      \"lastModified\": 1367273003,\n      \"fingerprint\": \"aeaae2123\"  // new in 8.4.0 hash over title, enclosures, body and url. Same fingerprint means same item and it's advised to locally mark the other one read as well and filter out duplicates in folder and all articles view\n    }, // etc\n  ]\n}\n</code></pre>"},{"location":"api/api-v1-2/#example","title":"Example","text":"<p>Autopaging would work like this:</p> <ul> <li>Get the first 20 items from a feed with id 12</li> </ul> <p>GET /items:</p> <pre><code>{\n  \"batchSize\": 20,\n  \"offset\": 0,\n  \"type\": 1,\n  \"id\": 12,\n  \"getRead\": false\n}\n</code></pre> <p>The item with the lowest item id is 43.</p> <ul> <li>Get the next 20 items: GET /items:</li> </ul> <pre><code>{\n  \"batchSize\": 20,\n  \"offset\": 43,\n  \"type\": 1,\n  \"id\": 12,\n  \"getRead\": false\n}\n</code></pre>"},{"location":"api/api-v1-2/#get-updated-items","title":"Get updated items","text":"<p>This is used to stay up to date.</p> <ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /items/updated</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"lastModified\": 123231, // returns only items with a lastModified timestamp &gt;= than this one\n                          // this may also return already existing items whose read or starred status\n                          // has been changed\n  \"type\": 1, // the type of the query (Feed: 0, Folder: 1, Starred: 2, All: 3)\n  \"id\": 12 // the id of the folder or feed, Use 0 for Starred and All\n}\n</code></pre> <ul> <li>Returns:</li> </ul> <pre><code>{\n  \"items\": [\n    {\n      \"id\": 3443,\n      \"guid\": \"http://grulja.wordpress.com/?p=76\",\n      \"guidHash\": \"3059047a572cd9cd5d0bf645faffd077\",\n      \"url\": \"http://grulja.wordpress.com/2013/04/29/plasma-nm-after-the-solid-sprint/\",\n      \"title\": \"Plasma-nm after the solid sprint\",\n      \"author\": \"Jan Grulich (grulja)\",\n      \"pubDate\": 1367270544,\n      \"body\": \"&lt;p&gt;At first I have to say...&lt;/p&gt;\",\n      \"enclosureMime\": null,\n      \"enclosureLink\": null,\n      \"feedId\": 67,\n      \"unread\": true,\n      \"starred\": false,\n      \"lastModified\": 1367273003,\n      \"fingerprint\": \"aeaae2123\"  // new in 8.4.0 hash over title, enclosures, body and url. Same fingerprint means same item and it's advised to locally mark the other one read as well and filter out duplicates in folder and all articles view\n    }, // etc\n  ]\n}\n</code></pre>"},{"location":"api/api-v1-2/#mark-an-item-as-read","title":"Mark an item as read","text":"<ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /items/{itemId}/read</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the item does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-multiple-items-as-read","title":"Mark multiple items as read","text":"<ul> <li>Status: Implemented in 1.2</li> <li>Method: PUT</li> <li>Route: /items/read/multiple</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"items\": [2, 3] // ids of the items\n}\n</code></pre> <ul> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-an-item-as-unread","title":"Mark an item as unread","text":"<ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /items/{itemId}/unread</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the item does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-multiple-items-as-unread","title":"Mark multiple items as unread","text":"<ul> <li>Status: Implemented in 1.2</li> <li>Method: PUT</li> <li>Route: /items/unread/multiple</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"items\": [2, 3] // ids of the items\n}\n</code></pre> <ul> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-an-item-as-starred","title":"Mark an item as starred","text":"<ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /items/{feedId}/{guidHash}/star</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the item does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-multiple-items-as-starred","title":"Mark multiple items as starred","text":"<ul> <li>Status: Implemented in 1.2</li> <li>Method: PUT</li> <li>Route: /items/star/multiple</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"items\": [\n    {\n      \"feedId\": 3,\n      \"guidHash\": \"sdf\"\n    }, // etc\n  ]\n}\n</code></pre> <ul> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-an-item-as-unstarred","title":"Mark an item as unstarred","text":"<ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /items/{feedId}/{guidHash}/unstar</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the item does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-multiple-items-as-unstarred","title":"Mark multiple items as unstarred","text":"<ul> <li>Status: Implemented in 1.2</li> <li>Method: PUT</li> <li>Route: /items/unstar/multiple</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"items\": [\n    {\n      \"feedId\": 3,\n      \"guidHash\": \"sdf\"\n    }, // etc\n  ]\n}\n</code></pre> <ul> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#mark-all-items-as-read","title":"Mark all items as read","text":"<ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /items/read</li> <li>Parameters:</li> </ul> <pre><code>{\n    // mark all items read lower than equal that id\n    // this is mean to prevent marking items as read which the client/user does not yet know of\n    \"newestItemId\": 10\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-2/#updater","title":"Updater","text":"<p>To enable people to write their own update scripts instead of relying on the sequential built in web and system cron, API routes and console commands have been created.</p> <p>Updating should be done in the following fashion:</p> <ul> <li>Run the cleanup before the update</li> <li>Get all feeds and user ids</li> <li>For each feed and user id, run the update command</li> <li>Run the cleanup after the update.</li> </ul> <p>This implementation in Python should give you a good idea how to design and run it.</p>"},{"location":"api/api-v1-2/#trigger-cleanup-before-update","title":"Trigger cleanup before update","text":"<p>This is used to clean up the database. It deletes folders and feeds that are marked for deletion</p> <ul> <li>Status: Implemented in 1.601</li> <li>Authentication: Requires admin user</li> <li>Method: GET</li> <li>Route: /cleanup/before-update</li> <li>Returns: Nothing</li> </ul> <p>New in 8.1.0: The console command for achieving the same result is:</p> <pre><code>php -f nextcloud/occ news:updater:before-update\n</code></pre>"},{"location":"api/api-v1-2/#get-feed-ids-and-usernames-for-all-feeds","title":"Get feed ids and usernames for all feeds","text":"<ul> <li>Status: Implemented in 1.203</li> <li>Authentication: Requires admin user</li> <li>Method: GET</li> <li>Route: /feeds/all</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"feeds\": [\n    {\n      \"id\": 39,\n      \"userId\": \"john\",\n    }, // etc\n  ]\n}\n</code></pre> <p>New in 8.1.0, Removed in 16.0.0: The console command for achieving the same result is:</p> <pre><code>php -f nextcloud/occ news:updater:all-feeds\n</code></pre>"},{"location":"api/api-v1-2/#trigger-a-feed-update","title":"Trigger a feed update","text":"<ul> <li>Status: Implemented in 1.601</li> <li>Authentication: Requires admin user</li> <li>Method: GET</li> <li>Route: /feeds/update</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"userId\": \"john\",\n  \"feedId\": 3\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: Nothing</li> </ul> <p>New in 8.1.0: The console command for achieving the same result is:</p> <pre><code>php -f nextcloud/occ news:updater:update-feed 3 john\n</code></pre>"},{"location":"api/api-v1-2/#trigger-cleanup-after-update","title":"Trigger cleanup after update","text":"<p>This is used to clean up the database. It removes old read articles which are not starred</p> <ul> <li>Status: Implemented in 1.601</li> <li>Authentication: Requires admin user</li> <li>Method: GET</li> <li>Route: /cleanup/after-update</li> <li>Returns: Nothing</li> </ul> <p>New in 8.1.0: The console command for achieving the same result is:</p> <pre><code>php -f nextcloud/occ news:updater:after-update\n</code></pre>"},{"location":"api/api-v1-2/#version","title":"Version","text":""},{"location":"api/api-v1-2/#get-the-version","title":"Get the version","text":"<ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /version</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"version\": \"5.2.3\"\n}\n</code></pre>"},{"location":"api/api-v1-2/#status","title":"Status","text":"<p>This API can be used to display warnings and errors in your client if the web app is improperly configured or not working. It is a good idea to call this route on like every 10th update and after the server connection parameters have been changed since it's likely that the user set up a new instance and configured the app improperly.</p>"},{"location":"api/api-v1-2/#get-the-status","title":"Get the status","text":"<ul> <li>Status: Implemented in 5.2.4</li> <li>Method: GET</li> <li>Route: /status</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"version\": \"5.2.4\",\n  \"warnings\": {\n    \"improperlyConfiguredCron\": false,  // if true the webapp will fail to update the feeds correctly\n    \"incorrectDbCharset\": false\n  }\n}\n</code></pre> <p>If improperlyConfiguredCron is true you should display a warning that the app will not receive updates properly.</p> <p>This is due to the fact that the installation runs the cron in ajax mode to update the feeds. This is the default if you don't change anything and means that the app will only receive feed updates if the webinterface is accessed which will lead to lost updates.</p> <p>You should show the following warning and the link should be clickable:</p> <pre><code>The News App updater is improperly configured and you will lose updates.\nSee http://hisdomain.com/index.php/apps/news for instructions on how to fix it.\n</code></pre> <p>If incorrectDbCharset is true you should display a warning that database charset is set up incorrectly and updates with unicode characters might fail</p>"},{"location":"api/api-v1-2/#user","title":"User","text":"<p>This API can be used to retrieve metadata about the current user.</p> <p>DEPRECATED: This API is deprecated, use the Nextcloud APIs instead.</p> <ul> <li>https://docs.nextcloud.com/server/latest/developer_manual/client_apis/OCS/ocs-api-overview.html#user-metadata for user data</li> <li><code>https://nc.url/avatar/{userid}/{size}?v={1|2}</code> for the avatar</li> </ul>"},{"location":"api/api-v1-2/#get-the-status_1","title":"Get the status","text":"<ul> <li>Status: Implemented in 6.0.5</li> <li>Method: GET</li> <li>Route: /user</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"userId\": \"john\",\n  \"displayName\": \"John Doe\",\n  \"lastLoginTimestamp\": 1241231233,  // unix timestamp\n  \"avatar\": { // if no avatar exists, this is null\n    \"data\": \"asdiufadfasdfjlkjlkjljdfdf\",  // base64 encoded image\n    \"mime\": \"image/jpeg\"\n  }\n}\n</code></pre>"},{"location":"api/api-v1-3/","title":"External API v1-3","text":"<p>The News app 1.3 offers a RESTful API.</p>"},{"location":"api/api-v1-3/#api-stability-contract","title":"API stability contract","text":"<p>The API level will change if the following occurs:</p> <ul> <li>A field of an object is removed</li> <li>A field of an object has a different datatype</li> <li>The meaning of an API call changes</li> </ul> <p>The API level will not change if:</p> <ul> <li>The app version is changed (e.g. 4.0.1.2 instead of 4.0 or 4.001)</li> <li>A new attribute is added (e.g. each item gets a new field \"something\": 1)</li> <li>The order of the JSON attributes is changed on any level (e.g. \"id\":3 is not the first field anymore, but the last)</li> </ul> <p>You have to design your app with these things in mind!:</p> <ul> <li>Don't depend on the order of object attributes. In JSON it does not matter where the object attribute is since you access the value by name, not by index</li> <li>Don't limit your app to the currently available attributes. New ones might be added. If you don't handle them, ignore them</li> <li>Use a library to compare versions, ideally one that uses semantic versioning</li> </ul>"},{"location":"api/api-v1-3/#authentication-basics","title":"Authentication &amp; Basics","text":"<p>Because REST is stateless you have to send user and password each time you access the API. Therefore running Nextcloud with SSL is highly recommended otherwise everyone in your network can log your credentials.</p> <p>The base URL for all calls is:</p> <pre><code>https://yournextcloud.com/index.php/apps/news/api/v1-3/\n</code></pre> <p>All defined routes in the Specification are appended to this url. To access all feeds for instance use this url:</p> <pre><code>https://yournextcloud.com/index.php/apps/news/api/v1-3/feeds\n</code></pre> <p>Credentials need to be passed as an HTTP header using HTTP basic auth:</p> <pre><code>Authorization: Basic $CREDENTIALS\n</code></pre> <p>where $CREDENTIALS is:</p> <pre><code>base64(USER:PASSWORD)\n</code></pre>"},{"location":"api/api-v1-3/#how-to-sync","title":"How To Sync","text":"<p>This is a small overview over how you should sync your articles with the Nextcloud News app. For more fine-grained details about the API see further down.</p> <p>All routes are given relative to the base API url (e.g.: https://yournextcloud.com/index.php/apps/news/api/v1-3)</p>"},{"location":"api/api-v1-3/#initial-sync","title":"Initial Sync","text":"<p>The initial sync happens, when a user adds a Nextcloud account in your app. In that case you should fetch all feeds, folders and unread or starred articles from the News app. Do not fetch all articles, not only because it syncs faster, but also because the user is primarily interested in unread articles. To fetch all unread and starred articles, you must call 4 routes:</p> <ul> <li>unread articles: GET /items?type=3&amp;getRead=false&amp;batchSize=-1</li> <li>starred articles: GET /items?type=2&amp;getRead=true&amp;batchSize=-1</li> <li>folders: GET /folders</li> <li>feeds: GET /feeds</li> </ul> <p>The JSON response structures can be viewed further down.</p>"},{"location":"api/api-v1-3/#syncing","title":"Syncing","text":"<p>When syncing, you want to push read/unread and starred/unstarred items to the server and receive new and updated items, feeds and folders. To do that, call the following routes:</p> <ul> <li>Notify the News app of unread articles: PUT /items/unread/multiple {\"items\": [1, 3, 5]}</li> <li>Notify the News app of read articles: PUT /items/read/multiple {\"items\": [1, 3, 5]}</li> <li>Notify the News app of starred articles: PUT /items/starred/multiple {\"itemIds\": [1, 3, 5]}</li> <li>Notify the News app of unstarred articles: PUT /items/unstarred/multiple {\"itemIds\": [1, 3, 5]}</li> <li>Get new folders: GET /folders</li> <li>Get new feeds: GET /feeds</li> <li>Get new items and modified items: GET /items/updated?lastModified=12123123123&amp;type=3</li> </ul>"},{"location":"api/api-v1-3/#accessing-api-from-a-web-application","title":"Accessing API from a web application","text":"<p>News 1.401 implements CORS which allows web applications to access the API. To access the API in a webapp you need to send the correct authorization header instead of simply putting auth data into the URL!. An example request in jQuery would look like this:</p> <pre><code>$.ajax({\n type: 'GET',\n url: 'https://yournextcloud.com/index.php/apps/news/api/v1-3/version',\n contentType: 'application/json',\n success: function (response) {\n  // handle success\n },\n error: function () {\n  // handle errors\n },\n beforeSend: function (xhr) {\n  var username = 'john';\n  var password = 'doe';\n  var auth = btoa(username + ':' + password);\n  xhr.setRequestHeader('Authorization', 'Basic ' + auth);\n }\n});\n</code></pre> <p>An example with AngularJS would look like this:</p> <pre><code>angular.module('YourApp', [])\n    .config(['$httpProvider', '$provide', function ($httpProvider, $provide) {\n        $provide.factory('AuthInterceptor', ['Credentials', '$q', function (Credentials, $q) {\n            return {\n                request: function (config) {\n                    // only set auth headers if url matches the api url\n                    if(config.url.indexOf(Credentials.url) === 0) {\n                        auth = btoa(Credentials.userName + ':' + Credentials.password);\n                        config.headers['Authorization'] = 'Basic ' + auth;\n                    }\n                    return config || $q.when(config);\n                }\n            };\n        }]);\n        $httpProvider.interceptors.push('AuthInterceptor');\n    }])\n    .factory('Credentials', function () {\n        return {\n            userName: 'user',\n            password: 'password',\n            url: 'https://yournextcloud.com/index.php/apps/news/api'\n        };\n    })\n    .run(['$http', function($http) {\n        $http({\n            method: 'GET',\n            url: 'https://yournextcloud.com/index.php/apps/news/api/v1-3/version'\n        }).success(function (data, status, header, config) {\n            // handle success\n        }).error(function (data, status, header, config) {\n            // handle error\n        });\n    }]);\n</code></pre>"},{"location":"api/api-v1-3/#input","title":"Input","text":"<p>In general the input parameters can be in the URL or request body, the App Framework doesnt differentiate between them.</p> <p>So JSON in the request body like:</p> <pre><code>{\n  \"id\": 3\n}\n</code></pre> <p>will be treated the same as</p> <pre><code>/?id=3\n</code></pre> <p>It is recommended though that you use the following convention:</p> <ul> <li>GET: parameters in the URL</li> <li>POST: parameters as JSON in the request body</li> <li>PUT: parameters as JSON in the request body</li> <li>DELETE: parameters as JSON in the request body</li> </ul>"},{"location":"api/api-v1-3/#output","title":"Output","text":"<p>The output is JSON.</p>"},{"location":"api/api-v1-3/#api-endpoints","title":"API Endpoints","text":""},{"location":"api/api-v1-3/#folders","title":"Folders","text":""},{"location":"api/api-v1-3/#get-all-folders","title":"Get all folders","text":"<ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /folders</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"folders\": [\n    {\n      \"id\": 4,\n      \"name\": \"Media\"\n    }, // etc\n  ]\n}\n</code></pre>"},{"location":"api/api-v1-3/#create-a-folder","title":"Create a folder","text":"<p>Creates a new folder and returns a new folder object</p> <ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /folders</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"name\": \"folder name\"\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 409: If the folder exists already</li> <li>HTTP 422: If the folder name is invalid (for instance empty)</li> <li>Returns:</li> </ul> <pre><code>{\n  \"folders\": [\n    {\n      \"id\": 4,\n      \"name\": \"Media\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api/api-v1-3/#delete-a-folder","title":"Delete a folder","text":"<p>Deletes a folder with the id folderId and all the feeds it contains</p> <ul> <li>Status: Implemented</li> <li>Method: DELETE</li> <li>Route: /folders/{folderId}</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the folder does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#rename-a-folder","title":"Rename a folder","text":"<p>Only the name can be updated</p> <ul> <li>Status: Implemented</li> <li>Method: PUT</li> <li>Route: /folders/{folderId}</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"name\": \"folder name\"\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 409: If the folder name does already exist</li> <li>HTTP 404: If the folder does not exist</li> <li>HTTP 422: If the folder name is invalid (for instance empty)</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-items-of-a-folder-as-read","title":"Mark items of a folder as read","text":"<ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /folders/{folderId}/read</li> <li>Parameters:</li> </ul> <pre><code>{\n    // mark all items read lower than equal that id\n    // this is mean to prevent marking items as read which the client/user does not yet know of\n    \"newestItemId\": 10\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#feeds","title":"Feeds","text":""},{"location":"api/api-v1-3/#sanitation","title":"Sanitation","text":"<p>The following attributes are not sanitized meaning: including them in your web application can lead to XSS:</p> <ul> <li>title</li> <li>link</li> </ul>"},{"location":"api/api-v1-3/#get-all-feeds","title":"Get all feeds","text":"<ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /feeds</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"feeds\": [\n    {\n      \"id\": 39,\n      \"url\": \"http://feeds.feedburner.com/oatmealfeed\",\n      \"title\": \"The Oatmeal - Comics, Quizzes, &amp; Stories\",\n      \"faviconLink\": \"http://theoatmeal.com/favicon.ico\",\n      \"added\": 1367063790,\n      \"nextUpdateTime\": 2071387335,\n      \"folderId\": 4,\n      \"unreadCount\": 9,\n      \"ordering\": 0, // 0 means no special ordering, 1 means oldest first, 2 newest first, new in 5.1.0\n      \"link\": \"http://theoatmeal.com/\",\n      \"pinned\": true // if a feed should be sorted before other feeds, added in 6.0.3,\n      \"updateErrorCount\": 0, // added in 8.6.0, 0 if no errors occurred during the last update,\n                             // otherwise is incremented for each failed update.\n                             // Once it reaches a threshold, a message should be displayed to the user\n                             // indicating that the feed has failed to update that many times.\n                             // The webapp displays the message after 50 failed updates\n      \"lastUpdateError\": \"error message here\"  // added in 8.6.0, empty string or null if no update\n                                               // error happened, otherwise contains the last update error message\n    }, // etc\n  ],\n  \"starredCount\": 2,\n  \"newestItemId\": 3443  // only sent if there are items\n}\n</code></pre>"},{"location":"api/api-v1-3/#create-a-feed","title":"Create a feed","text":"<p>Creates a new feed and returns the feed</p> <ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /feeds</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"url\": \"http:\\/\\/www.cyanogenmod.org\\/wp-content\\/themes\\/cyanogenmod\\/images\\/favicon.ico\",\n  \"folderId\": 81 //  id of the parent folder, null for root\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 409: If the feed exists already</li> <li>HTTP 422: If the feed cant be read (most likely contains errors)</li> <li>Returns:</li> </ul> <pre><code>{\n  \"feeds\": [\n    {\n      \"id\": 39,\n      \"url\": \"http://feeds.feedburner.com/oatmealfeed\",\n      \"title\": \"The Oatmeal - Comics, Quizzes, &amp; Stories\",\n      \"faviconLink\": \"http://theoatmeal.com/favicon.ico\",\n      \"added\": 1367063790,\n      \"nextUpdateTime\": 2071387335,\n      \"folderId\": 4,\n      \"unreadCount\": 9,\n      \"ordering\": 0, // 0 means no special ordering, 1 means oldest first, 2 newest first, new in 5.1.0\n      \"link\": \"http://theoatmeal.com/\",\n      \"pinned\": true // if a feed should be sorted before other feeds, added in 6.0.3\n    }\n  ],\n  \"newestItemId\": 23 // only sent if there are items\n}\n</code></pre>"},{"location":"api/api-v1-3/#delete-a-feed","title":"Delete a feed","text":"<p>Deletes a feed with the id feedId and all of its  items</p> <ul> <li>Status: Implemented</li> <li>Method: DELETE</li> <li>Route: /feeds/{feedId}</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#move-a-feed-to-a-different-folder","title":"Move a feed to a different folder","text":"<ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /feeds/{feedId}/move</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"folderId\": null //  id of the parent folder, null for root\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#rename-a-feed","title":"Rename a feed","text":"<ul> <li>Status: Implemented in News 1.807</li> <li>Method: POST</li> <li>Route: /feeds/{feedId}/rename</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"feedTitle\": \"New Title\"\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-items-of-a-feed-as-read","title":"Mark items of a feed as read","text":"<ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /feeds/{feedId}/read</li> <li>Parameters:</li> </ul> <pre><code>{\n  // mark all items read lower than equal that id\n  // this is mean to prevent marking items as read which the client/user does not yet know of\n  \"newestItemId\": 10\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#items","title":"Items","text":""},{"location":"api/api-v1-3/#sanitation_1","title":"Sanitation","text":"<p>The following attributes are not sanitized meaning: including them in your web application can lead to  XSS:</p> <ul> <li>title</li> <li>author</li> <li>url</li> <li>enclosureMime</li> <li>enclosureLink</li> <li>mediaThumbnail</li> <li>mediaDescription</li> </ul>"},{"location":"api/api-v1-3/#types","title":"Types","text":"Name Default Types author null string|null body string|null contentHash string|null enclosureLink string|null enclosureMime string|null feedId int fingerprint string|null guid string guidHash string id int lastModified \\\"0\\\" string|null mediaDescription string|null mediaThumbnail string|null pubDate int|null rtl false bool starred false bool title string|null unread false bool updatedDate string|null url string|null"},{"location":"api/api-v1-3/#get-items","title":"Get items","text":"<ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /items</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"batchSize\": 10, //  the number of items that should be returned, defaults to -1, new in 5.2.3: -1 returns all items\n  \"offset\": 30, // only return older (lower than equal that id) items than the one with id 30\n  \"type\": 1, // the type of the query (Feed: 0, Folder: 1, Starred: 2, All: 3)\n  \"id\": 12, // the id of the folder or feed, Use 0 for Starred and All\n  \"getRead\": true, // if true it returns all items, false returns only unread items\n  \"oldestFirst\": false  // implemented in 3.002, if true it reverse the sort order\n}\n</code></pre> <ul> <li>Returns:</li> </ul> <pre><code>{\n  \"items\": [\n    {\n      \"id\": 3443,\n      \"guid\": \"http://grulja.wordpress.com/?p=76\",\n      \"guidHash\": \"3059047a572cd9cd5d0bf645faffd077\",\n      \"url\": \"http://grulja.wordpress.com/2013/04/29/plasma-nm-after-the-solid-sprint/\",\n      \"title\": \"Plasma-nm after the solid sprint\",\n      \"author\": \"Jan Grulich (grulja)\",\n      \"pubDate\": 1367270544,\n      \"body\": \"&lt;p&gt;At first I have to say...&lt;/p&gt;\",\n      \"enclosureMime\": null,\n      \"enclosureLink\": null,\n      \"mediaThumbnail\": null, // new in 14.1.4-rc1\n      \"mediaDescription\": null, // new in 14.1.4-rc1\n      \"feedId\": 67,\n      \"unread\": true,\n      \"starred\": false,\n      \"rtl\": false, // new in 6.0.2\n      \"lastModified\": 1367273003,\n      \"fingerprint\": \"aeaae2123\"  // new in 8.4.0 hash over title, enclosures, body and url. Same fingerprint means same item and it's advised to locally mark the other one read as well and filter out duplicates in folder and all articles view\n    }, // etc\n  ]\n}\n</code></pre>"},{"location":"api/api-v1-3/#example","title":"Example","text":"<p>Autopaging would work like this:</p> <ul> <li>Get the first 20 items from a feed with id 12</li> </ul> <p>GET /items:</p> <pre><code>{\n  \"batchSize\": 20,\n  \"offset\": 0,\n  \"type\": 1,\n  \"id\": 12,\n  \"getRead\": false\n}\n</code></pre> <p>The item with the lowest item id is 43.</p> <ul> <li>Get the next 20 items: GET /items:</li> </ul> <pre><code>{\n  \"batchSize\": 20,\n  \"offset\": 43,\n  \"type\": 1,\n  \"id\": 12,\n  \"getRead\": false\n}\n</code></pre>"},{"location":"api/api-v1-3/#get-updated-items","title":"Get updated items","text":"<p>This is used to stay up to date.</p> <ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /items/updated</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"lastModified\": 123231, // returns only items with a lastModified timestamp &gt;= than this one\n                          // this may also return already existing items whose read or starred status\n                          // has been changed\n  \"type\": 1, // the type of the query (Feed: 0, Folder: 1, Starred: 2, All: 3)\n  \"id\": 12 // the id of the folder or feed, Use 0 for Starred and All\n}\n</code></pre> <ul> <li>Returns:</li> </ul> <pre><code>{\n  \"items\": [\n    {\n      \"id\": 3443,\n      \"guid\": \"http://grulja.wordpress.com/?p=76\",\n      \"guidHash\": \"3059047a572cd9cd5d0bf645faffd077\",\n      \"url\": \"http://grulja.wordpress.com/2013/04/29/plasma-nm-after-the-solid-sprint/\",\n      \"title\": \"Plasma-nm after the solid sprint\",\n      \"author\": \"Jan Grulich (grulja)\",\n      \"pubDate\": 1367270544,\n      \"body\": \"&lt;p&gt;At first I have to say...&lt;/p&gt;\",\n      \"enclosureMime\": null,\n      \"enclosureLink\": null,\n      \"feedId\": 67,\n      \"unread\": true,\n      \"starred\": false,\n      \"lastModified\": 1367273003,\n      \"fingerprint\": \"aeaae2123\"  // new in 8.4.0 hash over title, enclosures, body and url. Same fingerprint means same item and it's advised to locally mark the other one read as well and filter out duplicates in folder and all articles view\n    }, // etc\n  ]\n}\n</code></pre>"},{"location":"api/api-v1-3/#mark-an-item-as-read","title":"Mark an item as read","text":"<ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /items/{itemId}/read</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the item does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-multiple-items-as-read","title":"Mark multiple items as read","text":"<ul> <li>Status: Implemented in API 1.2</li> <li>Method: POST</li> <li>Route: /items/read/multiple</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"itemIds\": [2, 3] // ids of the items\n}\n</code></pre> <ul> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-an-item-as-unread","title":"Mark an item as unread","text":"<ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /items/{itemId}/unread</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the item does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-multiple-items-as-unread","title":"Mark multiple items as unread","text":"<ul> <li>Status: Implemented in API 1.2</li> <li>Method: POST</li> <li>Route: /items/unread/multiple</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"itemIds\": [2, 3] // ids of the items\n}\n</code></pre> <ul> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-an-item-as-starred","title":"Mark an item as starred","text":"<ul> <li>Status: Implemented in API 1.3</li> <li>Method: POST</li> <li>Route: /items/{itemId}/star</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the item does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-multiple-items-as-starred","title":"Mark multiple items as starred","text":"<ul> <li>Status: Implemented in API 1.3</li> <li>Method: POST</li> <li>Route: /items/star/multiple</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"itemIds\": [1, ...]\n}\n</code></pre> <ul> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-an-item-as-unstarred","title":"Mark an item as unstarred","text":"<ul> <li>Status: Implemented in API 1.3</li> <li>Method: POST</li> <li>Route: /items/{itemId}/unstar</li> <li>Parameters: none</li> <li>Return codes:</li> <li>HTTP 404: If the item does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-multiple-items-as-unstarred","title":"Mark multiple items as unstarred","text":"<ul> <li>Status: Implemented in API 1.3</li> <li>Method: POST</li> <li>Route: /items/unstar/multiple</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"itemIds\": [1, ...]\n}\n</code></pre> <ul> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#mark-all-items-as-read","title":"Mark all items as read","text":"<ul> <li>Status: Implemented</li> <li>Method: POST</li> <li>Route: /items/read</li> <li>Parameters:</li> </ul> <pre><code>{\n    // mark all items read lower than equal that id\n    // this is mean to prevent marking items as read which the client/user does not yet know of\n    \"newestItemId\": 10\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: nothing</li> </ul>"},{"location":"api/api-v1-3/#updater","title":"Updater","text":"<p>To enable people to write their own update scripts instead of relying on the sequential built in web and system cron, API routes and console commands have been created.</p> <p>Updating should be done in the following fashion:</p> <ul> <li>Run the cleanup before the update</li> <li>Get all feeds and user ids</li> <li>For each feed and user id, run the update command</li> <li>Run the cleanup after the update.</li> </ul> <p>This implementation in Python should give you a good idea how to design and run it.</p>"},{"location":"api/api-v1-3/#trigger-cleanup-before-update","title":"Trigger cleanup before update","text":"<p>This is used to clean up the database. It deletes folders and feeds that are marked for deletion</p> <ul> <li>Status: Implemented in News 1.601</li> <li>Authentication: Requires admin user</li> <li>Method: GET</li> <li>Route: /cleanup/before-update</li> <li>Returns: Nothing</li> </ul> <p>New in 8.1.0: The console command for achieving the same result is:</p> <pre><code>php -f nextcloud/occ news:updater:before-update\n</code></pre>"},{"location":"api/api-v1-3/#get-feed-ids-and-usernames-for-all-feeds","title":"Get feed ids and usernames for all feeds","text":"<ul> <li>Status: Implemented in News 1.203</li> <li>Authentication: Requires admin user</li> <li>Method: GET</li> <li>Route: /feeds/all</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"feeds\": [\n    {\n      \"id\": 39,\n      \"userId\": \"john\",\n    }, // etc\n  ]\n}\n</code></pre> <p>New in 8.1.0, Removed in 16.0.0: The console command for achieving the same result is:</p> <pre><code>php -f nextcloud/occ news:updater:all-feeds\n</code></pre>"},{"location":"api/api-v1-3/#trigger-a-feed-update","title":"Trigger a feed update","text":"<ul> <li>Status: Implemented in News 1.601</li> <li>Authentication: Requires admin user</li> <li>Method: GET</li> <li>Route: /feeds/update</li> <li>Parameters:</li> </ul> <pre><code>{\n  \"userId\": \"john\",\n  \"feedId\": 3\n}\n</code></pre> <ul> <li>Return codes:</li> <li>HTTP 404: If the feed does not exist</li> <li>Returns: Nothing</li> </ul> <p>New in 8.1.0: The console command for achieving the same result is:</p> <pre><code>php -f nextcloud/occ news:updater:update-feed 3 john\n</code></pre>"},{"location":"api/api-v1-3/#trigger-cleanup-after-update","title":"Trigger cleanup after update","text":"<p>This is used to clean up the database. It removes old read articles which are not starred</p> <ul> <li>Status: Implemented in News 1.601</li> <li>Authentication: Requires admin user</li> <li>Method: GET</li> <li>Route: /cleanup/after-update</li> <li>Returns: Nothing</li> </ul> <p>New in 8.1.0: The console command for achieving the same result is:</p> <pre><code>php -f nextcloud/occ news:updater:after-update\n</code></pre>"},{"location":"api/api-v1-3/#version","title":"Version","text":""},{"location":"api/api-v1-3/#get-the-version","title":"Get the version","text":"<ul> <li>Status: Implemented</li> <li>Method: GET</li> <li>Route: /version</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"version\": \"5.2.3\"\n}\n</code></pre>"},{"location":"api/api-v1-3/#status","title":"Status","text":"<p>This API can be used to display warnings and errors in your client if the web app is improperly configured or not working. It is a good idea to call this route on like every 10th update and after the server connection parameters have been changed since it's likely that the user set up a new instance and configured the app improperly.</p>"},{"location":"api/api-v1-3/#get-the-status","title":"Get the status","text":"<ul> <li>Status: Implemented in News 5.2.4</li> <li>Method: GET</li> <li>Route: /status</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"version\": \"5.2.4\",\n  \"warnings\": {\n    \"improperlyConfiguredCron\": false,  // if true the webapp will fail to update the feeds correctly\n    \"incorrectDbCharset\": false\n  }\n}\n</code></pre> <p>If improperlyConfiguredCron is true you should display a warning that the app will not receive updates properly.</p> <p>This is due to the fact that the installation runs the cron in ajax mode to update the feeds. This is the default if you don't change anything and means that the app will only receive feed updates if the webinterface is accessed which will lead to lost updates.</p> <p>You should show the following warning and the link should be clickable:</p> <pre><code>The News App updater is improperly configured and you will lose updates.\nSee http://hisdomain.com/index.php/apps/news for instructions on how to fix it.\n</code></pre> <p>If incorrectDbCharset is true you should display a warning that database charset is set up incorrectly and updates with unicode characters might fail</p>"},{"location":"api/api-v1-3/#user","title":"User","text":"<p>This API can be used to retrieve metadata about the current user.</p> <p>DEPRECATED: This API is deprecated, use the Nextcloud APIs instead.</p> <ul> <li>https://docs.nextcloud.com/server/latest/developer_manual/client_apis/OCS/ocs-api-overview.html#user-metadata for user data</li> <li><code>https://nc.url/avatar/{userid}/{size}?v={1|2}</code> for the avatar</li> </ul>"},{"location":"api/api-v1-3/#get-the-status_1","title":"Get the status","text":"<ul> <li>Status: Implemented in News 6.0.5</li> <li>Method: GET</li> <li>Route: /user</li> <li>Parameters: none</li> <li>Returns:</li> </ul> <pre><code>{\n  \"userId\": \"john\",\n  \"displayName\": \"John Doe\",\n  \"lastLoginTimestamp\": 1241231233,  // unix timestamp\n  \"avatar\": { // if no avatar exists, this is null\n    \"data\": \"asdiufadfasdfjlkjlkjljdfdf\",  // base64 encoded image\n    \"mime\": \"image/jpeg\"\n  }\n}\n</code></pre>"},{"location":"api/api-v2/","title":"External API v2 (Draft)","text":"<p>Disclaimer: this API has not been fully implemented yet, help is welcome.</p> <p>The News app offers a RESTful API which can be used to sync folders, feeds and items. The API also supports CORS which means that you can access the API from your browser using JavaScript.</p> <p>In addition, an updater API is exposed which enables API users to run feed updates in parallel using a REST API or Nextcloud console API.</p>"},{"location":"api/api-v2/#conventions","title":"Conventions","text":"<p>This document uses the following conventions:</p> <ul> <li>Object aliases as comments</li> <li>Error objects are omitted</li> </ul>"},{"location":"api/api-v2/#object-aliases-as-comments","title":"Object Aliases As Comments","text":"<p>In order to only specify the JSON objects once, comments are used to alias them.</p> <p>There are two types of aliases:</p> <ul> <li>Objects</li> <li>Object arrays</li> </ul> <p>Objects:</p> <pre><code>{\n    \"folder\": { /* folder object */ },\n}\n</code></pre> <p>means that the folder attributes will be listed inside the folder object</p> <p>Object arrays:</p> <pre><code>{\n    \"folders\": [ /* array of folder objects */ ],\n}\n</code></pre> <p>means that folder objects will be listed inside the folders array.</p>"},{"location":"api/api-v2/#error-objects-are-omitted","title":"Error Objects Are Omitted","text":"<p>This means that the error object will not be explicitly shown in the examples. All HTTP 400 response status codes contain an error object:</p> <pre><code>{\n    \"error\": {\n        \"code\": 1,\n        \"message\": \"error message\"\n    }\n}\n</code></pre>"},{"location":"api/api-v2/#api-stability-contract","title":"API Stability Contract","text":"<p>The API level will change if the following occurs:</p> <ul> <li>a required HTTP request header is added</li> <li>a required request parameter is added</li> <li>a field of a response object is removed</li> <li>a field of a response object is changed to a different datatype</li> <li>an HTTP response header is removed</li> <li>an HTTP response header is changed to a different datatype</li> <li>the meaning of an API call changes (e.g. /sync will not sync any more but show a sync timestamp)</li> </ul> <p>The API level will not change if:</p> <ul> <li>a new HTTP response header is added</li> <li>an optional new HTTP request header is added</li> <li>a new response parameter is added (e.g. each item gets a new field \"something\": 1)</li> <li>The order of the JSON attributes is changed on any level (e.g. \"id\":3 is not the first field anymore, but the last)</li> </ul> <p>You have to design your app with these things in mind!:</p> <ul> <li>Don't depend on the order of object attributes. In JSON it does not matter where the object attribute is since you access the value by name, not by index</li> <li>Don't limit your app to the currently available attributes. New ones might be added. If you don't handle them, ignore them</li> <li>Use a library to compare versions, ideally one that uses semantic versioning</li> </ul>"},{"location":"api/api-v2/#request-format","title":"Request Format","text":"<p>The base URL for all calls is:</p> <pre><code>https://yournextcloud.com/index.php/apps/news/api/v2\n</code></pre> <p>Unless an absolute Url is specified, the relative Urls in the Specification are appended to this url. To access the route /sync for instance you'd use the following url:</p> <pre><code>https://yournextcloud.com/index.php/apps/news/api/v2/sync\n</code></pre> <p>The required request headers are:</p> <ul> <li>Accept: application/json</li> </ul> <p>Any request method except GET:</p> <ul> <li>Content-Type: application/json; charset=utf-8</li> </ul> <p>Any route that allows caching:</p> <ul> <li>If-None-Match: an Etag, e.g. 6d82cbb050ddc7fa9cbb659014546e59. If no previous Etag is known, this header should be omitted</li> </ul> <p>The request body is either passed in the URL in case of a GET request (e.g.: ?foo=bar&amp;index=0) or as JSON, e.g.:</p> <pre><code>{\n    \"foo\": \"bar\",\n    \"index\": 0\n}\n</code></pre> <p>Note: The current Etag implementation contains a unix timestamp in milliseconds. This is an implementation detail and you should not rely on it.</p>"},{"location":"api/api-v2/#api-level-detection","title":"API Level Detection","text":"<p>Check the API level route</p>"},{"location":"api/api-v2/#authentication","title":"Authentication","text":"<p>Because REST is stateless you have to re-send user and password each time you access the API. Therefore running Nextcloud with SSL is highly recommended otherwise everyone in your network can log your credentials.</p> <p>Credentials are passed as an HTTP header using HTTP basic auth:</p> <pre><code>Authorization: Basic $CREDENTIALS\n</code></pre> <p>where $CREDENTIALS is:</p> <pre><code>base64(USER:PASSWORD)\n</code></pre> <p>This authentication/authorization method will be the recommended default until core provides an easy way to do OAuth</p> <p>Note: Even if login cookies are sent back to your client, they will not be considered for authentication.</p>"},{"location":"api/api-v2/#response-format","title":"Response Format","text":"<p>The status codes are not always provided by the News app itself, but might also be returned because of Nextcloud internal errors.</p> <p>The following status codes can always be returned by Nextcloud:</p> <ul> <li>401: The provided credentials to log into Nextcloud are invalid.</li> <li>403: The user is not allowed to access the route. This can happen if for instance of only users in the admin group can access the route and the user is not in it.</li> <li>404: The route can not be found or the resource does not exist. Can also happen if for instance you are trying to delete a folder which does not exist.</li> <li>5xx: An internal server error occurred. This can happen if the server is in maintenance mode or because of other reasons.</li> </ul> <p>The following status codes are returned by News:</p> <ul> <li>200: Everything went fine</li> <li>304: In case the resource was not modified, contains no response body. This means that you can ignore the request since everything is up to date.</li> <li>400: There was an app related error, check the error object if specified</li> <li>409: Conflict error which means that the resource exists already. Can be returned when updating (PATCH) or creating (POST) a resource, e.g. a folder</li> </ul> <p>The response headers are:</p> <ul> <li>Content-Type: application/json; charset=utf-8</li> <li>Etag: A string containing a cache header of maximum length 64, e.g. 6d82cbb050ddc7fa9cbb659014546e59. The etag value will be assembled using the number of feeds, folders and the highest last modified timestamp in milliseconds, e.g. 2-3-123131923912392391239. However consider that a detail and dont rely on it.</li> </ul> <p>The response body is a JSON structure that looks like this, which contains the actual data on the first level. The key is the resource in singular if it's a single resource or plural if its a collection. In case of HTTP 400, an error object is also present to help distinguishing between different error types:</p> <pre><code>{\n    \"error\": {\n        \"code\": 1,\n        \"message\": \"error message\"\n    }\n}\n</code></pre> <ul> <li>error: Only present when an HTTP 400 is returned to help distinguishing between error causes</li> <li>code: A unique error code</li> <li>message: A translated error message. The user's configured locale is used.</li> </ul> <p>In case of an 4xx or 5xx error the request was not successful and has to be retried. For instance marking items as read locally and syncing should send the same request again the next time the user syncs in case an error occurred.</p>"},{"location":"api/api-v2/#security-guidelines","title":"Security Guidelines","text":"<p>Read the following notes carefully to prevent being subject to security exploits:</p> <ul> <li>You should always enforce SSL certificate verification and never offer a way to turn it off. Certificate verification is important to prevent MITM attacks which is especially important in the mobile world where users are almost always connected to untrusted networks. In case a user runs a self-signed certificate on his server ask him to either install his certificate on his device or direct him to one of the many ways to sign his certificate for free (most notably letsencrypt.com)</li> <li>All string fields in a JSON response expect an item's body are not sanitized. This means that if you do not escape it properly before rendering you will be vulnerable to XSS attacks</li> <li>Basic Auth headers can easily be decrypted by anyone since base64 is an encoding, not an encryption. Therefore only send them if you are accessing an HTTPS website or display an easy to understand warning if the user chooses HTTP</li> <li>When creating a feed you can choose to add basic auth authentication credentials. These must be stored in clear text so anyone with access to your database (however they might have achieved it, think of Sql injection) can read them and use them to access the website. You should warn the user about this.</li> <li>If you are building a client in JavaScript or are using a link with target=\"blank\", remember to set the window.opener property to null and/or add a rel=\"noreferrer\" to your link to prevent your app from being target by an XSS attack</li> </ul>"},{"location":"api/api-v2/#syncing","title":"Syncing","text":"<p>All routes are given relative to the base API url, e.g.: /sync becomes  https://yourNextcloud.com/index.php/apps/news/api/v2/sync</p> <p>There are two usecases for syncing:</p> <ul> <li>Initial sync: the user does not have any data at all</li> <li>Syncing local and remote changes: the user has synced at least once and wants to submit and receive changes</li> </ul>"},{"location":"api/api-v2/#initial-sync","title":"Initial Sync","text":"<p>The initial sync happens when a user adds an Nextcloud account in your app. In that case you want to download all folders, feeds and unread/starred items. To do this, make the following request:</p> <ul> <li>Method: GET</li> <li>Route: /sync</li> <li>Authentication: required</li> <li>HTTP headers:</li> <li>Accept: \"application/json\"</li> </ul> <p>This will return the following status codes:</p> <ul> <li>200: Success</li> </ul> <p>and the following HTTP headers:</p> <ul> <li>Content-Type: application/json; charset=utf-8</li> <li>Etag: A string containing a cache header, maximum size 64 ASCII characters, e.g. 6d82cbb050ddc7fa9cbb659014546e59</li> </ul> <p>and the following request body:</p> <pre><code>{\n    \"folders\": [ /* array of folder objects */ ],\n    \"feeds\": [ /* array of feed objects */ ],\n    \"items\": [ /* array of item objects */ ]\n}\n</code></pre> <p>Note: Each object is explained in more detail in a separate section:</p> <ul> <li>Folders</li> <li>Feeds</li> <li>Items</li> </ul>"},{"location":"api/api-v2/#sync-local-and-remote-changes","title":"Sync Local And Remote Changes","text":"<p>After the initial sync the app has all folders, feeds and items. Now you want to push changes and retrieve updates from the server. To do this, make the following request:</p> <ul> <li>Method: POST</li> <li>Route: /sync</li> <li>Authentication: required</li> <li>HTTP headers:</li> <li>Content-Type: \"application/json; charset=utf-8\"</li> <li>Accept: \"application/json\"</li> <li>If-None-Match: \"6d82cbb050ddc7fa9cbb659014546e59\" (Etag from the previous request to the /sync route)</li> </ul> <p>with the following request body:</p> <pre><code>{\n    \"items\": [{\n            // read and starred\n            \"id\": 5,\n            \"isStarred\": false,\n            \"isUnread\": true,\n            \"contentHash\": \"08ffbcf94bd95a1faa6e9e799cc29054\"\n        }, {\n            // only read\n            \"id\": 6,\n            \"isUnread\": true,\n            \"contentHash\": \"09ffbcf94bd95a1faa6e9e799cc29054\"\n        }, {\n            // only starred\n            \"id\": 7,\n            \"isStarred\": false,\n            \"contentHash\": \"18ffbcf94bd95a1faa6e9e799cc29054\"\n    }, /* etc */]\n}\n</code></pre> <p>If no items have been read or starred, simply leave the items array empty, e.g.:</p> <pre><code>{\n    \"items\": []\n}\n</code></pre> <p>The response matches the GET call, except there can be two different types of item objects:</p> <ul> <li>Full: Contains all attributes</li> <li>Reduced: Contains only id, isUnread and isStarred</li> </ul> <p>The deciding factor whether a full or reduced item object is being returned depends on the contentHash in the request: If the contentHash matches the record in the database a reduced item object is being returned, otherwise a full object is used. Both can occur in the same items array at the same time.</p> <p>The idea behind this special handling is that if the contentHash matches the record in the database, the actual item content did not change. Therefore it is enough to know the item status. This greatly reduces the amount sent over the Net which is especially important for mobile apps.</p> <p>This also applies to folders and feeds, however the reduced folder and feed objects will only include the id element. The deciding factor whether only an id or the full object will be returned is the last modified modified timestamp which is included in the sent etag.</p> <p>If you push a list of items to be marked read/starred, there can also be less items in the response than the ones which were initially sent. This means that the item was deleted by the cleanup job and should be removed from the client device.</p> <p>For instance let's take a look at the following example. You are POSTing the following JSON:</p> <pre><code>{\n    \"items\": [{\n            \"id\": 5,\n            \"isStarred\": false,\n            \"isUnread\": true,\n            \"contentHash\": \"08ffbcf94bd95a1faa6e9e799cc29054\"\n        }, {\n            \"id\": 6,\n            \"isUnread\": true,\n            \"contentHash\": \"09ffbcf94bd95a1faa6e9e799cc29054\"\n        }, {\n            \"id\": 7,\n            \"isStarred\": false,\n            \"contentHash\": \"18ffbcf94bd95a1faa6e9e799cc29054\"\n    }]\n}\n</code></pre> <p>and receive the following output in return:</p> <pre><code>{\n    \"items\": [{\n            \"id\": 5,\n            \"isStarred\": false,\n            \"isUnread\": true\n        }, {\n            \"id\": 6,\n            \"isUnread\": true,\n            \"isStarred\": false\n    }]\n}\n</code></pre> <p>The item with the id 7 is missing from the response. This means that it was deleted on the server.</p> <p>For folders and feeds all ids will be returned so you can compare the existing ids with your locally available feeds and folders and remove the difference.</p>"},{"location":"api/api-v2/#folders","title":"Folders","text":"<p>Folders are represented using the following data structure:</p> <pre><code>{\n    \"id\": 3,\n    \"name\": \"funny stuff\"\n}\n</code></pre> <p>The attributes mean the following:</p> <ul> <li>id: 64bit Integer, id</li> <li>name: Arbitrary long text, folder's name</li> </ul>"},{"location":"api/api-v2/#deleting-a-folder","title":"Deleting A Folder","text":"<p>To delete a folder, use the following request:</p> <ul> <li>Method: DELETE</li> <li>Route: /folders/{id}</li> <li>Route Parameters:</li> <li>{id}: folder's id</li> <li>Authentication: required</li> </ul> <p>The following response is being returned:</p> <p>Status codes:</p> <ul> <li>200: Folder was deleted successfully</li> <li>404: Folder does not exist</li> </ul> <p>In case of an HTTP 200, the deleted folder is returned in full in the response, e.g.:</p> <pre><code>{\n    \"folder\": { /* folder object */ }\n}\n</code></pre> <p>Note: Deleted folders will not appear during the next sync so you also need to delete the folder locally afterwards. Folders should only be deleted locally if an HTTP 200 or 404 was returned.</p> <p>Note: If you delete a folder locally, you should also delete all feeds whose folderId attribute matches the folder's id attribute and also delete all items whose feedId attribute matches the feeds' id attribute. This is done automatically on the server and will also be missing on the next request.</p>"},{"location":"api/api-v2/#creating-a-folder","title":"Creating A Folder","text":"<p>To create a folder, use the following request:</p> <ul> <li>Method: POST</li> <li>Route: /folders</li> <li>Authentication: required</li> </ul> <p>with the following request body:</p> <pre><code>{\n    \"name\": \"Folder name\"\n}\n</code></pre> <p>The following response is being returned:</p> <p>Status codes:</p> <ul> <li>200: Folder was created successfully</li> <li>400: Folder creation error, check the error object:</li> <li>code: 1: folder name is empty</li> </ul> <p>In case of an HTTP 200, the created or already existing folder is returned in full in the response, e.g.:</p> <pre><code>{\n    \"folder\": { /* folder object */ }\n}\n</code></pre>"},{"location":"api/api-v2/#changing-a-folder","title":"Changing A Folder","text":"<p>The following attributes can be changed on the folder:</p> <ul> <li>name</li> </ul> <p>To change any number of attributes on a folder, use the following request and provide as much attributes that can be changed as you want:</p> <ul> <li>Method: PATCH</li> <li>Route: /folders/{id}</li> <li>Route Parameters:</li> <li>{id}: folder's id</li> <li>Authentication: required</li> </ul> <p>with the following request body:</p> <pre><code>{\n    \"name\": \"New folder name\"\n}\n</code></pre> <ul> <li>name: Arbitrary long text, the folder's name</li> </ul> <p>The following response is being returned:</p> <p>Status codes:</p> <ul> <li>200: Folder was updated successfully</li> <li>400: Folder update error, check the error object:</li> <li>code: 1: folder name is empty</li> <li>Other Nextcloud errors, see Response Format</li> </ul> <p>In case of an HTTP 200, the changed or already existing folder is returned in full in the response, e.g.:</p> <pre><code>{\n    \"folder\": { /* folder object */ }\n}\n</code></pre>"},{"location":"api/api-v2/#feeds","title":"Feeds","text":"<p>Feeds are represented using the following data structure:</p> <pre><code>{\n    \"id\": 4,\n    \"name\": \"The Oatmeal - Comics, Quizzes, &amp; Stories\",\n    \"faviconLink\": \"http://theoatmeal.com/favicon.ico\",\n    \"folderId\": 3,\n    \"ordering\": 0,\n    \"fullTextEnabled\": false,\n    \"updateMode\": 0,\n    \"isPinned\": true,\n    \"error\": {\n        \"code\": 1,\n        \"message\": \"\"\n    }\n}\n</code></pre> <p>The attributes mean the following:</p> <ul> <li>id: 64bit Integer, id</li> <li>name: Arbitrary long text, feed's name</li> <li>faviconLink: Arbitrary long text, feed's favicon location, null if not found</li> <li>folderId: 64bit Integer, the feed's folder or 0 in case no folder is specified</li> <li>ordering: 64bit Integer, overrides the feed's default ordering:</li> <li>0: Default</li> <li>1: Oldest on top</li> <li>2: Newest on top</li> <li>updateMode: 64bit Integer, describing how item updates are handled:</li> <li>0: No special behavior</li> <li>1: If an item is updated, mark it unread</li> <li>isPinned: Boolean, Used to list certain feeds before others. Feeds are first ordered by their isPinned value (true before false) and then by their name in alphabetical order</li> <li>error: error object, only present if an error occurred:</li> <li>code: The error code:<ul> <li>1: Error occurred during feed update</li> </ul> </li> <li>message: Translated error message depending on the user's configured server locale</li> </ul>"},{"location":"api/api-v2/#deleting-a-feed","title":"Deleting A Feed","text":"<p>To delete a feed, use the following request:</p> <ul> <li>Method: DELETE</li> <li>Route: /feeds/{id}</li> <li>Route Parameters:</li> <li>{id}: feed's id</li> <li>Authentication: required</li> </ul> <p>The following response is being returned:</p> <p>Status codes:</p> <ul> <li>200: Feed was deleted successfully</li> <li>404: Feed with given id was not found, no error object</li> <li>Other Nextcloud errors, see Response Format</li> </ul> <p>In case of an HTTP 200, the deleted feed is returned in full in the response, e.g.:</p> <pre><code>{\n    \"feed\": { /* feed object */ }\n}\n</code></pre> <p>Note: Deleted feeds will not appear during the next sync so you also need to delete the feed locally afterwards. Feeds should only be deleted locally if an HTTP 200 or 404 was returned.</p> <p>Note: If you delete a feed locally, you should also delete all items whose feedId attribute matches the feeds' id attribute. This is done automatically on the server and will also be missing on the next request.</p>"},{"location":"api/api-v2/#creating-a-feed","title":"Creating A feed","text":"<p>To create a feed, use the following request:</p> <ul> <li>Method: POST</li> <li>Route: /feeds</li> <li>Authentication: required</li> </ul> <p>with the following request body:</p> <pre><code>{\n    \"url\": \"https://feed.url.com\",\n    \"name\": \"Feed name\",\n    \"ordering\": 0,\n    \"folderId\": 3,\n    \"isPinned\": true,\n    \"fullTextEnabled\": false,\n    \"basicAuthUser\": \"user\",\n    \"basicAuthPassword\": \"password\"\n}\n</code></pre> <ul> <li>url: Arbitrary long text, the url needs to have the full schema e.g. https://the-url.com. In case the user omits the schema, prepending https is recommended</li> <li>folderId: 64bit Integer, the feed's folder or 0 in case no folder is specified</li> <li>name (optional): Arbitrary long text, the feeds name or if not given taken from the RSS/Atom feed</li> <li>basicAuthUser (optional): Arbitrary long text, if given basic auth headers are sent for the feed</li> <li>basicAuthPassword (optional): Arbitrary long text, if given basic auth headers are sent for the feed</li> <li>ordering (optional): See Feeds</li> <li>isPinned (optional): See Feeds</li> <li>fullTextEnabled (optional): See Feeds</li> </ul> <p>The following response is being returned:</p> <p>Status codes:</p> <ul> <li>200: Feed was created successfully</li> <li>400: Feed creation error, check the error object:</li> <li>code: 1: url is empty</li> <li>code: 2: malformed xml</li> <li>code: 3: no feed found for url (e.g. website does not have an RSS or Atom feed or direct link to feed is no feed)</li> <li>code: 4: feed format not supported (e.g. too old RSS version)</li> <li>code: 5: ssl issues (e.g. SSL certificate is invalid or php has issues accessing certificates on your server)</li> <li>code: 6: url can not be found or accessed</li> <li>code: 7: maximum redirects reached</li> <li>code: 8: maximum size reached</li> <li>code: 9: request timed out</li> <li>code: 10: invalid or missing http basic auth headers</li> <li>code: 11: not allowed to access the feed (difference here is that the user can be authenticated but not allowed to access the feed)</li> </ul> <p>In case of an HTTP 200, the created feed is returned in full in the response, e.g.:</p> <pre><code>{\n    \"feed\": { /* feed object */ }\n}\n</code></pre> <p>Note: Because the next sync would also pull in the added feed and items again, the added items will be omitted for saving bandwidth. This also means that after successfully creating a feed you will need to query the sync route again.</p>"},{"location":"api/api-v2/#changing-a-feed","title":"Changing A Feed","text":"<p>To change a feed, use the following request:</p> <ul> <li>Method: PATCH</li> <li>Route: /feeds/{id}</li> <li>Route Parameters:</li> <li>{id}: feed's id</li> <li>Authentication: required</li> </ul> <p>with the following request body:</p> <pre><code>{\n    \"url\": \"https://feed.url.com\",\n    \"name\": \"Feed name\",\n    \"ordering\": 0,\n    \"folderId\": 3,\n    \"isPinned\": true,\n    \"fullTextEnabled\": false,\n    \"basicAuthUser\": \"user\",\n    \"basicAuthPassword\": \"password\"\n}\n</code></pre> <p>All parameters are optional</p> <ul> <li>url (optional): Arbitrary long text, the url which was entered by the user with the full schema</li> <li>name (optional): Arbitrary long text, the feeds name or if not given taken from the RSS/Atom feed</li> <li>basicAuthUser (optional): Arbitrary long text, if given basic auth headers are sent for the feed</li> <li>basicAuthPassword (optional): Arbitrary long text, if given basic auth headers are sent for the feed</li> <li>ordering (optional): See feeds</li> <li>isPinned (optional): See feeds</li> <li>fullTextEnabled (optional): See feeds</li> <li>folderId (optional): 64bit Integer, the feed's folder or 0 in case no folder is specified</li> </ul> <p>The following response is being returned:</p> <p>Status codes:</p> <ul> <li>200: Feed was changed successfully</li> <li>400: Feed creation error, check the error object:</li> <li>code: 1: url is empty</li> <li>code: 2: malformed xml</li> <li>code: 3: no feed found for url (e.g. website does not have an RSS or Atom feed or direct link to feed is no feed)</li> <li>code: 4: feed format not supported (e.g. too old RSS version)</li> <li>code: 5: ssl issues (e.g. SSL certificate is invalid or php has issues accessing certificates on your server)</li> <li>code: 6: url can not be found or accessed</li> <li>code: 7: maximum redirects reached</li> <li>code: 8: maximum size reached</li> <li>code: 9: request timed out</li> <li>code: 10: invalid or missing http basic auth headers</li> <li>code: 11: not allowed to access the feed (difference here is that the user can be authenticated but not allowed to access the feed)</li> <li>Other Nextcloud errors, see Response Format</li> </ul> <p>In case of an HTTP 200, the changed feed is returned in full in the response, e.g.:</p> <pre><code>{\n    \"feed\": { /* feed object */ }\n}\n</code></pre> <p>Note: Because the next sync would also pull in the changed feed and items again, the added or updated items will be omitted for saving bandwidth. This also means that after successfully updating a feed you will need to query the sync route again.</p>"},{"location":"api/api-v2/#items","title":"Items","text":"<p>Items can occur in two different formats:</p> <ul> <li>Full</li> <li>Reduced</li> </ul> <p>The attributes mean the following:</p> <ul> <li>id: 64bit Integer, id</li> <li>url: Arbitrary long text, location of the online resource</li> <li>title: Arbitrary long text, item's title</li> <li>author: Arbitrary long text, name of the author/authors</li> <li>publishedAt: String representing an ISO 8601 DateTime object, when the item was published</li> <li>lastModifiedAt: String representing an ISO 8601 DateTime object, when the item was last modified</li> <li>enclosure: An enclosure object or null if none is present</li> <li>mimeType: Arbitrary long text, the enclosures mime type</li> <li>url: Arbitrary long text, location of the enclosure</li> <li>body: Arbitrary long text, sanitized (meaning: does not have to be escape), contains the item's content</li> <li>feedId: 64bit Integer, the item's feed it belongs to</li> <li>isUnread: Boolean, true if unread, false if read</li> <li>isStarred: Boolean, true if starred, false if not starred</li> <li>fingerprint: 64 ASCII characters, hash that is used to determine if an item is the same as an other one. The following behavior should be implemented:</li> <li>Items in a stream (e.g. All items, folders, feeds) should be filtered so that no item with the same fingerprint is present.</li> <li>When marking an item read, all items with the same fingerprint should also be marked as read.</li> <li>contentHash: 64 ASCII characters, used to determine if the item on the client is up to or out of date. The difference between the contentHash and the fingerprint attribute is that contentHash is always calculated from a stable set of attributes (title, author, url, enclosure, body) whereas the fingerprint is calculated from a set of attributes depending on the feed. The reason for this is that some feeds use different URLs for the same article so you would not want to include the URL as uniqueness criteria in that case. If the fingerprint was used for syncing however, an URL update would never reach the client.</li> </ul>"},{"location":"api/api-v2/#full","title":"Full","text":"<p>A full item contains the full content:</p> <pre><code>{\n    \"id\": 5,\n    \"url\": \"http://grulja.wordpress.com/2013/04/29/plasma-nm-after-the-solid-sprint/\",\n    \"title\": \"Plasma-nm after the solid sprint\",\n    \"author\": \"Jan Grulich (grulja)\",\n    \"publishedAt\": \"2005-08-15T15:52:01+0000\",\n    \"lastModifiedAt\": \"2005-08-15T15:52:01+0000\",\n    \"enclosure\": {\n        \"mimeType\": \"video/webm\",\n        \"url\": \"http://video.webmfiles.org/elephants-dream.webm\"\n    },\n    \"body\": \"&lt;p&gt;At first I have to say...&lt;/p&gt;\",\n    \"feedId\": 4,\n    \"isUnread\": true,\n    \"isStarred\": true,\n    \"fingerprint\": \"08ffbcf94bd95a1faa6e9e799cc29054\",\n    \"contentHash\": \"18ffbcf94bd95a1faa6e9e799cc29054\"\n}\n</code></pre>"},{"location":"api/api-v2/#reduced","title":"Reduced","text":"<p>A reduced item only contains the item status:</p> <pre><code>{\n    \"id\": 5,\n    \"isUnread\": true,\n    \"isStarred\": true\n}\n</code></pre>"},{"location":"api/api-v2/#updater","title":"Updater","text":"<p>Instead of using the built in, slow cron updater you can use the parallel update API to update feeds. The API can be accessed through REST or Nextcloud console API.</p> <p>The API should be used in the following way:</p> <ul> <li>Clean up before the update</li> <li>Get all feeds and user ids</li> <li>For each feed and user id, run the update</li> <li>Clean up after the update</li> </ul> <p>The reference implementation in Python should give you a good idea how to design your own updater.</p> <p>If the REST API is used, Authorization is required via Basic Auth and the user needs to be in the admin group. If the Nextcloud console API is used, no authorization is required.</p>"},{"location":"api/api-v2/#clean-up-before-update","title":"Clean Up Before Update","text":"<p>This is used to clean up the database. It deletes folders and feeds that are marked for deletion.</p> <p>Console API:</p> <pre><code>php -f /path/to/nextcloud/occ news:updater:before-update\n</code></pre> <p>REST API:</p> <ul> <li>Method: GET</li> <li>Route: /updater/before-update</li> <li>Authentication: admin</li> </ul>"},{"location":"api/api-v2/#get-all-feeds-and-user-ids","title":"Get All Feeds And User Ids","text":"<p>This call returns pairs of feed ids and user ids.</p> <p>Console API:</p> <pre><code>php -f /path/to/nextcloud/occ news:updater:all-feeds\n</code></pre> <p>REST API:</p> <ul> <li>Method: GET</li> <li>Route: /updater/all-feeds</li> <li>Authentication: admin</li> </ul> <p>Both APIs will return the following response body or terminal output:</p> <pre><code>{\n    \"updater\": [{\n      \"feedId\": 3,\n      \"userId\": \"john\"\n    }, /* etc */]\n}\n</code></pre>"},{"location":"api/api-v2/#update-a-users-feed","title":"Update A User's Feed","text":"<p>After all feed ids and user ids are known, feeds can be updated in parallel.</p> <p>Console API:</p> <ul> <li>Positional Parameters:</li> <li>{feedId}: the feed's id</li> <li>{userId}: the user's id</li> </ul> <pre><code>php -f /path/to/nextcloud/occ news:updater:update-feed {feedId} {userId}\n</code></pre> <p>REST API:</p> <ul> <li>Method: GET</li> <li>Route: /updater/update-feed?feedId={feedId}&amp;userId={userId}</li> <li>Route Parameters:</li> <li>{feedId}: the feed's id</li> <li>{userId}: the user's id</li> <li>Authentication: admin</li> </ul>"},{"location":"api/api-v2/#clean-up-after-update","title":"Clean Up After Update","text":"<p>This is used to clean up the database. It removes old read articles which are not starred.</p> <p>Console API:</p> <pre><code>php -f /path/to/nextcloud/occ news:updater:after-update\n</code></pre> <p>REST API:</p> <ul> <li>Method: GET</li> <li>Route: /updater/after-update</li> <li>Authentication: admin</li> </ul>"},{"location":"api/api-v2/#meta-data","title":"Meta Data","text":"<p>The retrieve meta data about the app, use the following request:</p> <ul> <li>Method: GET</li> <li>Route: /</li> <li>Authentication: required</li> </ul> <p>The following response is being returned:</p> <p>Status codes:</p> <ul> <li>200: Meta data accessed successfully</li> </ul> <p>In case of an HTTP 200, the the following response is returned:</p> <pre><code>{\n    \"version\": \"9.0.0\",\n    \"issues\": {\n        \"improperlyConfiguredCron\": false\n    },\n    \"user\": {\n        \"userId\": \"john\",\n        \"displayName\": \"John Doe\",\n        \"avatar\": {\n            \"data\": \"asdiufadfasdfjlkjlkjljdfdf\",\n            \"mime\": \"image/jpeg\"\n        }\n    }\n}\n</code></pre> <p>The attributes mean the following:</p> <ul> <li>version: Arbitrary long text, News app version</li> <li>issues: An object containing a dictionary of issues which need to be displayed to the user:</li> <li>improperlyConfiguredCron: Boolean, if true this means that no feed updates are run on the server because the updater is misconfigured</li> <li>user: user information:</li> <li>userId: Arbitrary long text, the login name</li> <li>displayName: Arbitrary long text, the full name like it's displayed in the web interface</li> <li>avatar: an avatar object, null if none is set<ul> <li>data: Arbitrary long text, the user's image encoded as base64</li> <li>mime: Arbitrary long text, avatar mimetype</li> </ul> </li> </ul>"},{"location":"api/api-v2/#api-level","title":"API Level","text":"<p>To find out which API levels are supported, make a request to the following route:</p> <ul> <li>Method: GET</li> <li>Route: https://yournextcloud.com/index.php/apps/news/api</li> <li>Authentication: none</li> </ul> <p>The following response is being returned:</p> <p>Status codes:</p> <ul> <li>200: The supported API levels can be parsed from the response</li> <li>404: The user is either running a version prior to 8.8.0 or the News app is disabled or not installed.</li> </ul> <p>In case of an HTTP 200, the supported API levels are returned as JSON, e.g.:</p> <pre><code>{\n    \"apiLevels\": [\"v1-2\", \"v2\"]\n}\n</code></pre> <p>apiLevels: An array of arbitrary long strings, strings represent the the supported api levels which directly correspond to the first fragment after the /api/ Url fragment.</p> <p>To find out if a user is running an older News version than 8.8.0, make a request to the following route:</p> <ul> <li>Method: GET</li> <li>Route: https://yournextcloud.com/index.php/apps/news/api/v1-2/version</li> <li>Authentication: required</li> </ul> <p>Status codes:</p> <ul> <li>200: Only the v1-2 API level is supported</li> <li>404: The News app is disabled or not installed.</li> </ul> <p>Since these calls can be expensive you could first try to make a call to the sync route and if it fails with an HTTP 404 run the API level detection. Of course the choice which APIs you are going to support is entirely yours and you could also hard require v2.</p> <p>Note: Future News app versions may remove the v1-2 API level depending on how widespread the adoption has become. You should therefore always make sure which API levels are actually supported.</p>"},{"location":"features/customCSS/","title":"Custom CSS","text":"<p>Sometimes you want to add additional CSS for a feed to improve the rendering. This can very easily be done by adding a CSS class to css/custom.css following the following naming convention:</p> <ul> <li>Take the URL from the \\ attribute (e.g.: \\https://www.google.de/path?my=query \\)</li> <li>Extract the Domain from the URL (e.g.: ) <li>Strip the leading www. (e.g.: google.de)</li> <li>Replace all . with - (e.g.: google-de)</li> <li>Prepend custom- (e.g.: custom-google-de)</li> <p>Each class rule should be prefixed with #app-content and should only affect the article body. An example rule would be:</p> <pre><code>#app-content .custom-google-de .body {\n    /* Custom CSS rules here */\n}\n</code></pre>"},{"location":"features/integration/","title":"Integrations","text":""},{"location":"features/integration/#is-there-an-subscription-url-to-easily-subscribe-to-feeds","title":"Is There An Subscription URL To Easily Subscribe To Feeds?","text":"<p>By appending <code>/index.php/apps/news?subscribe_to=SOME_RSS_URL</code> to your NextCloud base path URL, you can launch the News app with a pre-filled URL, e.g.:</p> <p>Ex.</p> <pre><code>https://yourdomain.com/nextcloud/index.php/apps/news?subscribe_to=https://github.com/nextcloud/news/releases\n</code></pre>"},{"location":"features/integration/#known-working-integrations","title":"Known Working Integrations","text":""},{"location":"features/integration/#chrome-edge","title":"Chrome / Edge","text":"<ol> <li>Install RSS Subscription Extension (by Google) extension</li> <li>Open the extension's options menu</li> <li>Click <code>Add..</code></li> <li>In the Description field, enter a description for the RSS reader entry. 'NextCloud News' is a reasonable name.</li> <li>Enter <code>https://&lt;NEXTCLOUD_BASE_PATH&gt;/index.php/apps/news?subscribe_to=%s</code> replacing &lt;NEXTCLOUD_BASE_PATH&gt; with the base URL path to your NextCloud instance.<ul> <li>Domain based example: https://cloud.mydomain.com/index.php/apps/news?subscribe_to=%s</li> <li>Domain+subpath based example: https://cloud.mydomain.com/nextcloud/index.php/apps/news?subscribe_to=%s</li> </ul> </li> </ol>"},{"location":"features/integration/#firefox","title":"Firefox","text":"<ol> <li>Install Firefox Add-on Extension Awesome RSS</li> <li>Open the <code>Preferences</code> for the extension</li> <li>In the 'Subscribe using' section, select the <code>NextCloud</code> radio button</li> <li>In the field link field, enter the base NextCloud URL.<ul> <li>Domain based example: https://cloud.mydomain.com/</li> <li>Domain+subpath based example: https://cloud.mydomain.com/nextcloud/</li> </ul> </li> </ol>"},{"location":"features/plugins/","title":"Plugins","text":"<p>Plugins were created to keep the app maintainable while still making it possible to easily implement additional functionality.</p> <p>There are essentially three different use cases for plugins:</p> <ul> <li>Creating or extending server-side functionality, e.g. creating additional REST API endpoints</li> <li>Offering article actions such as share via Twitter or E-Mail</li> <li>Dropping in additional CSS or JavaScript</li> </ul>"},{"location":"features/plugins/#the-basics","title":"The Basics","text":"<p>Whatever plugin you want to create, you first need to create a basic structure. A plugin is basically  just an app, so you can take advantage of the full Nextcloud app API. Take a look at the developer docs or dig into the tutorial.</p> <p>However, if you just want to start slow, the full process is described below.</p> <p>First create a skeleton app using the web interface</p> <p>The application name affects the name and namespace of your plugin and only one app can exist using the same name. Choose wisely. This will become the directory name in the Nextcloud <code>apps/</code> directory</p> <ul> <li>newsplugin/</li> <li>appinfo/<ul> <li>app.php</li> <li>info.xml</li> </ul> </li> </ul> <p>Note: You must license your app under the AGPL 3 or later to comply with the News app's license. Don't forget to add the license as plain text file if you want to distribute your app!</p> <p>Then we want to make sure that our code is only run if the News app is enabled. To do that put the following PHP code into the newsplugin/lib/AppInfo/Application.php file:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace OCA\\NewsBookmarkPlugin\\AppInfo;\n\nuse OCP\\AppFramework\\App;\nuse OCP\\Util;\nuse OCP\\App as Test;\n\nclass Application extends App {\n public const APP_ID = 'newsbookmarkplugin';\n\n public function __construct() {\n  parent::__construct(self::APP_ID);\n\n\n        // your code here\n }\n}\n</code></pre>"},{"location":"features/plugins/#server-side-plugin","title":"Server-Side Plugin","text":"<p>A Server-Side plugin is a plugin that uses the same infrastructure as the News app for its own purposes. An example would be a plugin that makes the starred entries of a user available via an interface or a bookmark app that also shows starred articles as bookmarks.</p> <p>It's very easy to interface with the News app. Because all Classes are registered in the news/app/application.php it takes almost no effort to use the same infrastructure.</p> <p>Note: Keep in mind that these classes are essentially private which means they might break if the News app changes. There is no real public API so use at your own risk ;)</p> <p>Since you don't want to extend the app but use its resources, its advised that you don't inherit from the Application class but rather include it in your own container in newsplugin/appinfo/application.php:</p> <pre><code>&lt;?php\nnamespace OCA\\NewsPlugin\\AppInfo;\n\nuse OCP\\AppFramework\\App;\nuse OCA\\News\\AppInfo\\Application as News;\n\nclass Application extends App {\n\n    public function __construct (array $urlParams=[]) {\n        parent::__construct('newsplugin', $urlParams);\n\n        $container = $this-&gt;getContainer();\n\n        $container-&gt;registerService('NewsContainer', function($c) {\n            $app = new News();\n            return $app-&gt;getContainer();\n        });\n\n        $container-&gt;registerService(OCA\\News\\Service\\FeedService::class, function($c) {\n            // use the feed service from the news app, you can use all\n            // defined classes but its recommended that you stick to the\n            // mapper and service classes since they are less likely to change\n            return $c-&gt;query('NewsContainer')-&gt;query(OCA\\News\\Service\\FeedService::class);\n        });\n    }\n\n}\n</code></pre> <p>Using automatic container assembly you can then use it from your code by simply adding the type to your constructors.</p>"},{"location":"features/plugins/#todo-update-the-following","title":"TODO: Update the following","text":"<p>If your plugin integrates with another Nextcloud app, make sure to also require it be installed. If you depend on the Bookmarks app for instance use:</p> <pre><code>&lt;?php\nnamespace OCA\\MyNewsPlugin\\AppInfo;\nuse OCP\\App;\n\nif (App::isEnabled('news') &amp;&amp; App::isEnabled('bookmarks')) {\n    // your code here\n}\n</code></pre> <p>Now you are ready to enable the app. Head over to the apps section and choose the Not enabled section. Your app should be listed under the name Example News Plugin (or whatever name you set in the info.xml).</p> <p>With the basics set up, you can now choose how to progress further. In our case we just want to add some additional CSS and JavaScript, so we are going to create a client-side plugin.</p>"},{"location":"features/plugins/#client-side-plugin","title":"Client-Side Plugin","text":"<p>A client-side plugin is adding additional JavaScript and/or CSS to the News app. Remember the app.php? Open it and place the following contents inside:</p> <pre><code>&lt;?php\nnamespace OCA\\MyNewsPlugin\\AppInfo;\nuse OCP\\App;\n\nif (App::isEnabled('news') &amp;&amp; class_exists('OCA\\News\\Plugin\\Client\\Plugin')) {\n    \\OCA\\News\\Plugin\\Client\\Plugin::registerScript('newsplugin', 'script');\n    \\OCA\\News\\Plugin\\Client\\Plugin::registerStyle('newsplugin', 'style');\n}\n</code></pre> <p>This will tell the News app to load the following files after its own JavaScript and CSS files have been included:</p> <ul> <li>newsplugin/js/script.js</li> <li>newspluing/css/style.css</li> </ul>"},{"location":"features/plugins/#adding-basic-javascript-functionality","title":"Adding Basic JavaScript Functionality","text":"<p>You can basically add any JavaScript you want. If you want to add a new article action, this is a bit more complicated because it's hard to hook into Angular from the outside. Therefore, the News app provides an API which makes creating additional article actions a breeze.</p> <p>A basic article action looks like this:</p> <pre><code>News.addArticleAction(function($actionsElement, article) {\n    // your code here\n});\n</code></pre> <p>The addArticleAction method expects a function with the following parameters:</p> <ul> <li>$actionsElement: The DOM element wrapped in jQuery where your plugin should be appended to</li> <li>article: The current article's data (readonly!). The article object has the following properties:</li> <li>id: the article ID in the News database</li> <li>url: the article URL it points to</li> <li>title: the article title</li> <li>author: the article author</li> <li>pubDate: the article published date, a Unix timestamp</li> <li>body: the HTML content</li> <li>enclosureMime: if an enclosure is added, this is the mime type</li> <li>enclosureLink: this is the source of the enclosure</li> <li>mediaThumbnail: if there is a media attached, this is its thumbnail</li> <li>mediaDescription: if there is a media attached, this is its description</li> <li>feedId: the feed ID it belongs to</li> <li>unread: if the article is unread (bool)</li> <li>starred: if the article is starred (bool)</li> <li>lastModified: the last modified date</li> </ul> <p>With that in mind, let's add the Twitter button. Open the JavaScript file at newsplugin/js/script.js and add the following contents:</p> <pre><code>News.addArticleAction(function($actionsElement, article) {\n    var $li = $('&lt;li&gt;')\n        .addClass('article-plugin-twitter');\n    var $button = $('&lt;button&gt;')\n        .attr('title', t('newsplugin', 'Share on Twitter'));\n    var text = 'Read this: ' + article.url;\n    var url = 'https://twitter.com/intent/tweet?text=' + encodeURIComponent(text);\n\n    $button.click(function (event) {\n        window.open(url);\n        window.opener = null; // prevent twitter being from able to access the DOM\n        event.stopPropagation();  // prevent expanding in compact mode\n    });\n\n    $li.append($button);\n    $actionsElement.append($li);\n});\n</code></pre> <p>Great! Now the only thing left is to add some styles.</p>"},{"location":"features/plugins/#adding-styles","title":"Adding Styles","text":"<p>Now let's add some styles to our app. We want to style the button to look like a Twitter icon, so simply download an icon (e.g. from Wikipedia) and place it at newsplugin/img/twitter.png.</p> <p>Then open the newspluing/css/style.css file and add the following CSS:</p> <pre><code>.article-plugin-twitter button {\n    background-image: url('../img/twitter.png');\n}\n</code></pre> <p>Reload the News app and click the three dots menu, sit back and enjoy :)</p>"},{"location":"features/themes/","title":"Themes","text":"<p>Nextcloud News can look different with the following themes:</p> <ul> <li>Nextcloud News Themes</li> </ul>"}]}